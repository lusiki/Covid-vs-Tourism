filter(n > 100) %>%
select(-n) %>%
group_by(Ticker) %>%
distinct(Date, .keep_all=TRUE) %>%
ungroup() %>%
tidyr::spread(Ticker, Close, fill=0) %>%
mutate( Date = as.Date(Date,"%d.%m.%Y")) %>%
arrange(desc(Date))
DF %>% summarise_each(funs(sum(.==0)))
DF %>% gather(.,Ticker,Close)
DF %>% gather(.,Ticker,Close,-Date)
DF %>%
gather(.,Ticker,Close,-Date) %>%
fulter(Close != o)
DF %>%
gather(.,Ticker,Close,-Date) %>%
filter(Close != o)
DF %>%
gather(.,Ticker,Close,-Date) %>%
filter(Close != 0)
DF %>%
gather(.,Ticker,Close,-Date) %>%
filter(Close != 0) %>% View()
spread(Ticker, Close)
DF %>%
gather(.,Ticker,Close,-Date) %>%
filter(Close != 0) %>%
spread(Ticker, Close)
DF <- stockDF %>% select(Date = date, Close = last_price, url) %>%
mutate(Date = gsub("[.]$","", Date)) %>%
mutate(Ticker = str_sub(.$url,-37,-34)) %>%
mutate(Close = as.numeric(gsub("(.*),.*", "\\1", Close))) %>%
select(-url) %>%
group_by(Ticker) %>%
mutate(n = n()) %>%
ungroup() %>%
filter(n > 100) %>%
select(-n) %>%
group_by(Ticker) %>%
distinct(Date, .keep_all=TRUE) %>%
ungroup() %>%
tidyr::spread(Ticker, Close, fill=0) %>%
mutate( Date = as.Date(Date,"%d.%m.%Y")) %>%
arrange(desc(Date))
View(DF)
TOURISMdta <- stockDF %>% select(Date = date, Close = last_price, url) %>%
mutate(Date = gsub("[.]$","", Date)) %>%
mutate(Ticker = str_sub(.$url,-37,-34)) %>%
mutate(Close = as.numeric(gsub("(.*),.*", "\\1", Close))) %>%
select(-url) %>%
group_by(Ticker) %>%
mutate(n = n()) %>%
ungroup() %>%
filter(n > 100) %>%
select(-n) %>%
group_by(Ticker) %>%
distinct(Date, .keep_all=TRUE) %>%
ungroup() %>%
tidyr::spread(Ticker, Close, fill=0) %>%
mutate( Date = as.Date(Date,"%d.%m.%Y")) %>%
arrange(desc(Date))
TOURISMdta <- zoo(TOURISMdta[,-1], order.by = TOURISMdta$Date)
TOURISMdta
TOURISMdta %>% View()
Quandl.api_key("jvwknzKzNdiuqGPCyXcT")
source("../Secret/Passkey.R")
source("./Secret/Passkey.R")
Crobex <- Quandl("ZAGREBSE/CROBEX", type = "zoo",collapse = "daily",start_date = "2019-01-02", end_date = Sys.Date())
rates <- get_rates_from_prices(TOURISMdta,
quote = "Close",
multi_day = TRUE,
compounding = "continuous")
rates_indx <- get_rates_from_prices(Crobex,
quote = "Close",
multi_day = TRUE,
compounding = "continuous")
colnames(rates_indx) <- "Crobex"
rates
parametric_tests(list_of_returns = securities_returns,
event_start = as.Date("2020-02-24"),
event_end = as.Date("2020-04-14"))
securities_returns <- apply_market_model(
rates = rates,
regressor = rates_indx,
same_regressor_for_all = TRUE,
market_model = "sim",
estimation_method = "ols",
estimation_start = as.Date("2019-01-01"),
estimation_end = as.Date("2020-01-23")
)
parametric_tests(list_of_returns = securities_returns,
event_start = as.Date("2020-02-24"),
event_end = as.Date("2020-04-14"))
?get_rates_from_prices
rates
rates[] <- lapply(rates, function(x) {
replace(x, is.na(x) | is.infinite(x), 0)
})
View(rates)
rates[] <- dapply(rates, function(x) {
replace(x, is.na(x) | is.infinite(x), 0)
})
rates[sapply(rates, is.infinite)] <- 0
rates <- get_rates_from_prices(TOURISMdta,
quote = "Close",
multi_day = TRUE,
compounding = "continuous")
rates[, is.infinite] <- 0
rates <- get_rates_from_prices(TOURISMdta,
quote = "Close",
multi_day = TRUE,
compounding = "continuous")
rates[!is.finite(rates)] <- 0
na.fill(rates, fill = 0)
inf.fill(rates, fill = 0)
rates <- get_rates_from_prices(TOURISMdta,
quote = "Close",
multi_day = TRUE,
compounding = "continuous")
rates
na.fill(rates, fill = 0)
rates[!is.finite(rates)] <- 0
rates
rates <- get_rates_from_prices(TOURISMdta,
quote = "Close",
multi_day = TRUE,
compounding = "continuous")
na.fill(rates, fill = 0)
rates[which(!is.finite())] <- 0
rates[which(!is.finite(.))] <- 0
rates[!is.finite()] <- 0
e
rates <- get_rates_from_prices(TOURISMdta,
quote = "Close",
multi_day = TRUE,
compounding = "continuous")
na.fill(rates, fill = 0)
rates[!is.finite(ARNT)] <- 0
rates_indx <- get_rates_from_prices(Crobex,
quote = "Close",
multi_day = TRUE,
compounding = "continuous")
colnames(rates_indx) <- "Crobex"
securities_returns <- apply_market_model(
rates = rates,
regressor = rates_indx,
same_regressor_for_all = TRUE,
market_model = "sim",
estimation_method = "ols",
estimation_start = as.Date("2019-01-01"),
estimation_end = as.Date("2020-01-23")
)
rates[!is.finite(ARNT)] <- NA
rates[!is.finite()] <- NA
apply(rates, 2, function(x) ifelse(is.finite(rates), x, NA))
apply(rates, 2, function(x) ifelse(is.finite(rates), x, 0))
apply(rates, 2, function(x) ifelse(is.infinite(rates), x, 0))
apply(rates, 2, function(x) ifelse(is.na(rates), x, 0))
rates <- get_rates_from_prices(TOURISMdta,
quote = "Close",
multi_day = TRUE,
compounding = "continuous")
apply(rates, 2, function(x) ifelse(is.na(rates), x, 0))
rates <- get_rates_from_prices(TOURISMdta,
quote = "Close",
multi_day = TRUE,
compounding = "continuous")
rates
ratesDF <- as.data.frame(rates)
View(ratesDF)
ratesDF[complete.cases(ratesDF), ]
rates <- get_rates_from_prices(TOURISMdta,
quote = "Close",
multi_day = TRUE,
compounding = "continuous")
ratesDF <- as.data.frame(rates)
View(ratesDF)
df <- ratesDF[is.finite(rowSums(ratesDF)),]
df <- ratesDF[!is.infinite(ratesDF),]
df <- ratesDF[is.finite(rowSums(ARNT)),]
rates <- get_rates_from_prices(TOURISMdta,
quote = "Close",
multi_day = TRUE,
compounding = "continuous")
rates
rates %>% View()
ratesDF <- as.data.frame(rates)
ratesDF[which(!is.finite(ratesDF))] <- 0
rates[which(!is.finite(rates))] <- 0
rates <- rates[which(!is.finite(rates))] <- 0
rates <- get_rates_from_prices(TOURISMdta,
quote = "Close",
multi_day = TRUE,
compounding = "continuous")
rates <- rates[which(!is.finite(rates))] <- 0
rates %>% View()
rates <- get_rates_from_prices(TOURISMdta,
quote = "Close",
multi_day = TRUE,
compounding = "continuous")
ratesDF <- as.data.frame(rates)
View(ratesDF)
View(stockDF)
rates <- get_rates_from_prices(TOURISMdta,
quote = "Close",
multi_day = TRUE,
compounding = "continuous")
ratesDF <- as.data.frame(rates)
dat[sapply(dat, is.infinite)] <- NA
ratesDF[sapply(ratesDF, is.infinite)] <- NA
ratesDF[sapply(ratesDF, is.nan)] <- NA
ratesDF[sapply(ratesDF, is.na)] <- 0
TOURISMdta <- zoo(ratesDF[,-1], order.by = ratesDF$Date)
TOURISMdta <- zoo(ratesDF)
TOURISMdta
rates_indx <- get_rates_from_prices(Crobex,
quote = "Close",
multi_day = TRUE,
compounding = "continuous")
colnames(rates_indx) <- "Crobex"
securities_returns <- apply_market_model(
rates = rates,
regressor = rates_indx,
same_regressor_for_all = TRUE,
market_model = "sim",
estimation_method = "ols",
estimation_start = as.Date("2019-01-01"),
estimation_end = as.Date("2020-01-23")
)
rates <- get_rates_from_prices(TOURISMdta,
quote = "Close",
multi_day = TRUE,
compounding = "continuous")
retes <- zoo(ratesDF)
rates <- zoo(ratesDF)
rates_indx <- get_rates_from_prices(Crobex,
quote = "Close",
multi_day = TRUE,
compounding = "continuous")
colnames(rates_indx) <- "Crobex"
securities_returns <- apply_market_model(
rates = rates,
regressor = rates_indx,
same_regressor_for_all = TRUE,
market_model = "sim",
estimation_method = "ols",
estimation_start = as.Date("2019-01-01"),
estimation_end = as.Date("2020-01-23")
)
rates
rates <- get_rates_from_prices(TOURISMdta,
quote = "Close",
multi_day = TRUE,
compounding = "continuous")
rates
ratesDF <- as.data.frame(rates)
ratesDF[sapply(ratesDF, is.infinite)] <- NA
ratesDF[sapply(ratesDF, is.nan)] <- NA
ratesDF[sapply(ratesDF, is.na)] <- 0
str(ratesDF)
rates <- zoo(ratesDF)
fortify.zoo(ratesDF, name = "Date")
rownames(ratesDF) <- 1:nrow(ratesDF)
rates <- get_rates_from_prices(TOURISMdta,
quote = "Close",
multi_day = TRUE,
compounding = "continuous")
ratesDF <- as.data.frame(rates)
ratesDF[sapply(ratesDF, is.infinite)] <- NA
ratesDF[sapply(ratesDF, is.nan)] <- NA
ratesDF[sapply(ratesDF, is.na)] <- 0
rownames(ratesDF) <- 1:nrow(ratesDF)
ratesDF <- cbind(newColName = rownames(ratesDF), ratesDF)
rownames(ratesDF) <- 1:nrow(ratesDF)
rates <- get_rates_from_prices(TOURISMdta,
quote = "Close",
multi_day = TRUE,
compounding = "continuous")
ratesDF <- as.data.frame(rates)
ratesDF[sapply(ratesDF, is.infinite)] <- NA
ratesDF[sapply(ratesDF, is.nan)] <- NA
ratesDF[sapply(ratesDF, is.na)] <- 0
View(ratesDF)
TOURISMdta <- zoo(TOURISMdta[,-1], order.by = TOURISMdta$Date)
rm(list=ls())
ISIN <- readxl::read_xlsx("./Data/ISIN_list.xlsx") %>% select(ISIN)
links <- c()
rawDta <- c()
for( i in ISIN){
links <- paste0('https://zse.hr/json/securityHistory/', i,
'/2019-01-01/2021-04-13/hr?trading_model_id=ALL')
}
for (i in links){
rawDta[[i]] <- fromJSON(content(GET(i), as = "text", encoding = "UTF-8"))
}
stockDF <- lapply(rawDta, '[[', "rows") %>% bind_rows()
TOURISMdta <- stockDF %>% select(Date = date, Close = last_price, url) %>%
mutate(Date = gsub("[.]$","", Date)) %>%
mutate(Ticker = str_sub(.$url,-37,-34)) %>%
mutate(Close = as.numeric(gsub("(.*),.*", "\\1", Close))) %>%
select(-url) %>%
group_by(Ticker) %>%
mutate(n = n()) %>%
ungroup() %>%
filter(n > 100) %>%
select(-n) %>%
group_by(Ticker) %>%
distinct(Date, .keep_all=TRUE) %>%
ungroup() %>%
tidyr::spread(Ticker, Close, fill=0) %>%
mutate( Date = as.Date(Date,"%d.%m.%Y")) %>%
arrange(desc(Date))
TOURISMdta <- zoo(TOURISMdta[,-1], order.by = TOURISMdta$Date)
source("./Secret/Passkey.R")
Crobex <- Quandl("ZAGREBSE/CROBEX", type = "zoo",collapse = "daily",start_date = "2019-01-02", end_date = Sys.Date())
rates <- get_rates_from_prices(TOURISMdta,
quote = "Close",
multi_day = TRUE,
compounding = "continuous")
rates
ratesDF <- as.data.frame(rates)
ratesDF$Date <- rownames(ratesDF)
ratesDF$Date <- rownames(ratesDF)
ratesDF <- data.frame(names = rownames(ratesDF), rates)
rownames(ratesDF) <- NULL
ratesDF <- data.frame(Date = rownames(ratesDF), rates)
rates <- get_rates_from_prices(TOURISMdta,
quote = "Close",
multi_day = TRUE,
compounding = "continuous")
ratesDF <- data.frame(Date = rownames(ratesDF), rates)
rownames(ratesDF) <- NULL
ratesDF[sapply(ratesDF, is.infinite)] <- NA
ratesDF[sapply(ratesDF, is.nan)] <- NA
ratesDF[sapply(ratesDF, is.na)] <- 0
rates <-  zoo(ratesDF[,-1], order.by = ratesDF$Date)
rates
rates_indx <- get_rates_from_prices(Crobex,
quote = "Close",
multi_day = TRUE,
compounding = "continuous")
colnames(rates_indx) <- "Crobex"
securities_returns <- apply_market_model(
rates = rates,
regressor = rates_indx,
same_regressor_for_all = TRUE,
market_model = "sim",
estimation_method = "ols",
estimation_start = as.Date("2019-01-01"),
estimation_end = as.Date("2020-01-23")
)
str(rates)
rates <- get_rates_from_prices(TOURISMdta,
quote = "Close",
multi_day = TRUE,
compounding = "continuous")
str(rates)
ratesDF <- data.frame(Date = rownames(ratesDF), rates)
rownames(ratesDF) <- NULL
ratesDF[sapply(ratesDF, is.infinite)] <- NA
ratesDF[sapply(ratesDF, is.nan)] <- NA
ratesDF[sapply(ratesDF, is.na)] <- 0
rates <- get_rates_from_prices(TOURISMdta,
quote = "Close",
multi_day = TRUE,
compounding = "continuous")
ratesDF <- data.frame(Date = rownames(ratesDF), rates)
rownames(ratesDF) <- NULL
ratesDF[sapply(ratesDF, is.infinite)] <- NA
ratesDF[sapply(ratesDF, is.nan)] <- NA
ratesDF[sapply(ratesDF, is.na)] <- 0
rates <- get_rates_from_prices(TOURISMdta,
quote = "Close",
multi_day = TRUE,
compounding = "continuous")
TOURISMdta <- zoo(TOURISMdta[,-1], order.by = TOURISMdta$Date)
rates <- get_rates_from_prices(TOURISMdta,
quote = "Close",
multi_day = TRUE,
compounding = "continuous")
securities_returns <- apply_market_model(
rates = rates,
regressor = rates_indx,
same_regressor_for_all = TRUE,
market_model = "sim",
estimation_method = "ols",
estimation_start = as.Date("2019-01-01"),
estimation_end = as.Date("2020-01-23")
)
rates <- get_rates_from_prices(TOURISMdta,
quote = "Close",
multi_day = TRUE,
compounding = "continuous")
rates
str(rates)
ratesDF <- data.frame(Date = rownames(ratesDF), rates)
rownames(ratesDF) <- NULL
ratesDF[sapply(ratesDF, is.infinite)] <- NA
ratesDF[sapply(ratesDF, is.nan)] <- NA
ratesDF[sapply(ratesDF, is.na)] <- 0
View(rates)
ratesDF <- data.frame(Date = rownames(ratesDF), rates)
ratesDF <- data.frame(Date = rownames(ratesDF), rates)
rownames(ratesDF) <- NULL
rownames(ratesDF) <- NULL
ratesDF[sapply(ratesDF, is.infinite)] <- NA
ratesDF[sapply(ratesDF, is.nan)] <- NA
ratesDF[sapply(ratesDF, is.na)] <- 0
rates <-  zoo(ratesDF[,-1], order.by = ratesDF$Date)
str(rates)
ratesDF <- data.frame(Date = rownames(ratesDF), rates) %>% mutate(Date = as.Date(Date))
ratesDF <- data.frame(Date = rownames(ratesDF), rates) %>% mutate(Date = as.Date(Date,"%d.%m.%Y"))
str(ratesDF)
ratesDF <- data.frame(Date = rownames(ratesDF), rates)
ratesDF <- data.frame(Date = rownames(ratesDF), rates) %>% mutate(Date = as.Date(Date,"%Y-%m-%d"))
rownames(ratesDF) <- NULL
ratesDF[sapply(ratesDF, is.infinite)] <- NA
ratesDF[sapply(ratesDF, is.nan)] <- NA
ratesDF[sapply(ratesDF, is.na)] <- 0
str(ratesDF)
rates <-  zoo(ratesDF[,-1], order.by = ratesDF$Date)
str(rates)
rates_indx <- get_rates_from_prices(Crobex,
quote = "Close",
multi_day = TRUE,
compounding = "continuous")
colnames(rates_indx) <- "Crobex"
securities_returns <- apply_market_model(
rates = rates,
regressor = rates_indx,
same_regressor_for_all = TRUE,
market_model = "sim",
estimation_method = "ols",
estimation_start = as.Date("2019-01-01"),
estimation_end = as.Date("2020-01-23")
)
parametric_tests(list_of_returns = securities_returns,
event_start = as.Date("2020-02-24"),
event_end = as.Date("2020-04-14"))
nonparametric_tests(list_of_returns = securities_returns,
event_start = as.Date("2020-02-24"),
event_end = as.Date("2020-04-14"))
parametric_tests(list_of_returns = securities_returns,
event_start = as.Date("2020-02-24"),
event_end = as.Date("2020-04-14"))
nonparametric_tests(list_of_returns = securities_returns,
event_start = as.Date("2020-02-24"),
event_end = as.Date("2020-04-14"))
colnames(rates)
SplitD <- data.frame(name=colnames(rates),
when = rep(as.Date("2020-02-24"),3))
SplitD
SplitD <- data.frame(name=colnames(rates),
when = rep(as.Date("2020-02-24"),12))
SplitD
es <- eventstudy(firm.returns = Returns,
event.list = SplitD,
event.window = 40,
type = "None",
to.remap = TRUE,
remap = "cumsum",
inference = TRUE,
inference.strategy = "bootstrap")
library(eventstudies)
es <- eventstudy(firm.returns = Returns,
event.list = SplitD,
event.window = 40,
type = "None",
to.remap = TRUE,
remap = "cumsum",
inference = TRUE,
inference.strategy = "bootstrap")
Returns <- na.omit(rates)
es <- eventstudy(firm.returns = Returns,
event.list = SplitD,
event.window = 40,
type = "None",
to.remap = TRUE,
remap = "cumsum",
inference = TRUE,
inference.strategy = "bootstrap")
plot(es)
colnames(rates_indx) <- "Crobex"
es2 <- eventstudy(firm.returns = Returns,
event.list = SplitD,
event.window = 40,
type = "marketModel",
to.remap = TRUE,
remap = "cumsum",
inference = TRUE,
inference.strategy = "bootstrap",
model.args = list(market.returns=rates_indx$Crobex))
plot(es2)
gold <- Quandl("LBMA/GOLD", type = "zoo", collapse = "daily", start_date = "2019-01-01",end_date = Sys.Date())
gold <- gold[,5]
add_indx <- get_rates_from_prices(gold,
quote = "Close",
multi_day = TRUE,
compounding = "continuous")
colnames(add_indx) <- "gold"
es3 <- eventstudy(firm.returns = Returns,
event.list = SplitD,
event.window = 40,
type = "marketModel",
to.remap = TRUE,
remap = "cumsum",
inference = TRUE,
inference.strategy = "bootstrap",
model.args = list(market.returns=rates_indx$Crobex,
others=add_indx$gold,
market.returns.purge=TRUE))
plot(es3)
