ARENA <- fromJSON(response, flatten = TRUE) %>%
data.frame() %>%
select(Date = rows.date, ARNT = rows.last_price ) %>%
mutate( Date = gsub("[.]$","", Date)) %>%
mutate( Date = as.Date(Date,"%d.%m.%Y"),
ARNT = as.numeric(gsub("(.*),.*", "\\1", ARNT)))
r <- GET("https://zse.hr/json/securityHistory/HRARNTRA0004/2019-01-01/2021-04-13/hr?trading_model_id=ALL")
response <- content(r, as = "text", encoding = "UTF-8")
ARENA <- fromJSON(response, flatten = TRUE) %>%
data.frame() %>%
select(Date = rows.date, ARNT = rows.last_price ) %>%
mutate( Date = gsub("[.]$","", Date)) %>%
mutate( Date = as.Date(Date,"%d.%m.%Y"),
ARNT = as.numeric(gsub("(.*),.*", "\\1", ARNT)))
r <- GET("https://zse.hr/json/securityHistory/HRMAISRA0007/2019-01-01/2021-04-13/hr?trading_model_id=ALL")
response <- content(r, as = "text", encoding = "UTF-8")
MAISTRA <- fromJSON(response, flatten = TRUE) %>%
data.frame() %>%
select(Date = rows.date, MAIS = rows.last_price ) %>%
mutate( Date = gsub("[.]$","", Date)) %>%
mutate( Date = as.Date(Date,"%d.%m.%Y"),
MAIS = as.numeric(gsub("(.*),.*", "\\1", MAIS)))
r <- GET("https://zse.hr/json/securityHistory/HRRIVPRA0000/2019-10-23/2021-04-13/hr?trading_model_id=ALL")
response <- content(r, as = "text", encoding = "UTF-8")
VALAMAR <- fromJSON(response, flatten = TRUE) %>%
data.frame() %>%
select(Date = rows.date, RIVP = rows.last_price ) %>%
mutate( Date = gsub("[.]$","", Date)) %>%
mutate( Date = as.Date(Date,"%d.%m.%Y"),
RIVP = as.numeric(gsub("(.*),.*", "\\1", RIVP)))
TOURISMdta <-  join_all(list(ARENA,MAISTRA,VALAMAR), by='Date', type='left')
View(TOURISMdta)
TOURISMdta <-  join_all(list(ARENA,MAISTRA,VALAMAR), by='Date', type='left') %>% drop_na()
TOURISMdta <-  join_all(list(ARENA,MAISTRA,VALAMAR), by='Date', type='left')
TOURISMdta <-  join_all(list(ARENA,MAISTRA,VALAMAR), by='Date', type='left') %>% drop_na()
str(TOURISMdta)
range(TOURISMdta$Date)
r <- GET("https://zse.hr/json/securityHistory/HRRIVPRA0000/2019-01-01/2021-04-13/hr?trading_model_id=ALL")
response <- content(r, as = "text", encoding = "UTF-8")
VALAMAR <- fromJSON(response, flatten = TRUE) %>%
data.frame() %>%
select(Date = rows.date, RIVP = rows.last_price ) %>%
mutate( Date = gsub("[.]$","", Date)) %>%
mutate( Date = as.Date(Date,"%d.%m.%Y"),
RIVP = as.numeric(gsub("(.*),.*", "\\1", RIVP)))
TOURISMdta <-  join_all(list(ARENA,MAISTRA,VALAMAR), by='Date', type='left') %>% drop_na()
range(TOURISMdta$Date)
Crobex <- Quandl("ZAGREBSE/CROBEX", type = "zoo",collapse = "daily",start_date = "2019-01-02", end_date = Sys.Date())
library(zoo)
TOURISMdta <- read.zoo(TOURISMdta)
TOURISMdta <-  join_all(list(ARENA,MAISTRA,VALAMAR), by='Date', type='left') %>% drop_na()
View(TOURISMdta)
TOURISMdta <- as.zoo(TOURISMdta)
TOURISMdta <- as.zoo(TOURISMdta, order.by = as.Date(rownames(TOURISMdta)))
View(TOURISMdta)
str(TOURISMdta)
TOURISMdta <- xts(TOURISMdta)
TOURISMdta <- xts(TOURISMdta, order.by = Date)
TOURISMdta <- xts(TOURISMdta, order.by = "Date")
TOURISMdta <- read.zoo(TOURISMdta)
TOURISMdta <-  join_all(list(ARENA,MAISTRA,VALAMAR), by='Date', type='left') %>% drop_na()
TOURISMdta <- read.zoo(TOURISMdta)
TOURISMdta <- read.zoo(TOURISMdta, Date)
TOURISMdta <-  join_all(list(ARENA,MAISTRA,VALAMAR), by='Date', type='left') %>% drop_na()
TOURISMdta <- read.zoo(TOURISMdta, Date)
str(TOURISMdta)
TOURISMdta <- read.zoo(TOURISMdta, order.by = Date)
TOURISMdta <- xts(TOURISMdta, order.by = Date)
TOURISMdta <- zoo(TOURISMdta, order.by = TOURISMdta$Date)
TOURISMdta <- zoo(TOURISMdta[,-1], order.by = TOURISMdta$Date)
TOURISMdta <-  join_all(list(ARENA,MAISTRA,VALAMAR), by='Date', type='left') %>% drop_na()
TOURISMdta <- zoo(TOURISMdta[,-1], order.by = TOURISMdta$Date)
TOURISMdta <-  join_all(list(ARENA,MAISTRA,VALAMAR), by='Date', type='left') %>% drop_na()
r <- GET("https://zse.hr/json/securityHistory/HRARNTRA0004/2019-01-01/2021-04-13/hr?trading_model_id=ALL")
response <- content(r, as = "text", encoding = "UTF-8")
ARENA <- fromJSON(response, flatten = TRUE) %>%
data.frame() %>%
select(Date = rows.date, ARNT = rows.last_price ) %>%
mutate( Date = gsub("[.]$","", Date)) %>%
mutate( Date = as.Date(Date,"%d.%m.%Y"),
ARNT = as.numeric(gsub("(.*),.*", "\\1", ARNT)))
r <- GET("https://zse.hr/json/securityHistory/HRMAISRA0007/2019-01-01/2021-04-13/hr?trading_model_id=ALL")
response <- content(r, as = "text", encoding = "UTF-8")
MAISTRA <- fromJSON(response, flatten = TRUE) %>%
data.frame() %>%
select(Date = rows.date, MAIS = rows.last_price ) %>%
mutate( Date = gsub("[.]$","", Date)) %>%
mutate( Date = as.Date(Date,"%d.%m.%Y"),
MAIS = as.numeric(gsub("(.*),.*", "\\1", MAIS)))
r <- GET("https://zse.hr/json/securityHistory/HRRIVPRA0000/2019-01-01/2021-04-13/hr?trading_model_id=ALL")
response <- content(r, as = "text", encoding = "UTF-8")
VALAMAR <- fromJSON(response, flatten = TRUE) %>%
data.frame() %>%
select(Date = rows.date, RIVP = rows.last_price ) %>%
mutate( Date = gsub("[.]$","", Date)) %>%
mutate( Date = as.Date(Date,"%d.%m.%Y"),
RIVP = as.numeric(gsub("(.*),.*", "\\1", RIVP)))
library(estudy2)
library(plotly)
library(TSstudio)
library(jsonlite)
library(plyr)
library(zoo)
r <- GET("https://zse.hr/json/securityHistory/HRARNTRA0004/2019-01-01/2021-04-13/hr?trading_model_id=ALL")
response <- content(r, as = "text", encoding = "UTF-8")
ARENA <- fromJSON(response, flatten = TRUE) %>%
data.frame() %>%
select(Date = rows.date, ARNT = rows.last_price ) %>%
mutate( Date = gsub("[.]$","", Date)) %>%
mutate( Date = as.Date(Date,"%d.%m.%Y"),
ARNT = as.numeric(gsub("(.*),.*", "\\1", ARNT)))
r <- GET("https://zse.hr/json/securityHistory/HRARNTRA0004/2019-01-01/2021-04-13/hr?trading_model_id=ALL")
library(httr)
r <- GET("https://zse.hr/json/securityHistory/HRARNTRA0004/2019-01-01/2021-04-13/hr?trading_model_id=ALL")
response <- content(r, as = "text", encoding = "UTF-8")
ARENA <- fromJSON(response, flatten = TRUE) %>%
data.frame() %>%
select(Date = rows.date, ARNT = rows.last_price ) %>%
mutate( Date = gsub("[.]$","", Date)) %>%
mutate( Date = as.Date(Date,"%d.%m.%Y"),
ARNT = as.numeric(gsub("(.*),.*", "\\1", ARNT)))
View(ARENA)
r <- GET("https://zse.hr/json/securityHistory/HRMAISRA0007/2019-01-01/2021-04-13/hr?trading_model_id=ALL")
response <- content(r, as = "text", encoding = "UTF-8")
MAISTRA <- fromJSON(response, flatten = TRUE) %>%
data.frame() %>%
select(Date = rows.date, MAIS = rows.last_price ) %>%
mutate( Date = gsub("[.]$","", Date)) %>%
mutate( Date = as.Date(Date,"%d.%m.%Y"),
MAIS = as.numeric(gsub("(.*),.*", "\\1", MAIS)))
r <- GET("https://zse.hr/json/securityHistory/HRMAISRA0007/2019-01-01/2021-04-13/hr?trading_model_id=ALL")
response <- content(r, as = "text", encoding = "UTF-8")
MAISTRA <- fromJSON(response, flatten = TRUE) %>%
data.frame() %>%
select(Date = rows.date, MAIS = rows.last_price ) %>%
mutate( Date = gsub("[.]$","", Date)) %>%
mutate( Date = as.Date(Date,"%d.%m.%Y"),
MAIS = as.numeric(gsub("(.*),.*", "\\1", MAIS)))
r <- GET("https://zse.hr/json/securityHistory/HRRIVPRA0000/2019-01-01/2021-04-13/hr?trading_model_id=ALL")
response <- content(r, as = "text", encoding = "UTF-8")
VALAMAR <- fromJSON(response, flatten = TRUE) %>%
data.frame() %>%
select(Date = rows.date, RIVP = rows.last_price ) %>%
mutate( Date = gsub("[.]$","", Date)) %>%
mutate( Date = as.Date(Date,"%d.%m.%Y"),
RIVP = as.numeric(gsub("(.*),.*", "\\1", RIVP)))
th <-
TOURISMdta <- left_join(ARENA, MAISTRA, by=c("Date"))
library(dplyr)
th <-
TOURISMdta <- left_join(ARENA, MAISTRA, by=c("Date"))
View(TOURISMdta)
th <-
TOURISMdta <- left_join(ARENA, MAISTRA,VALAMAR, by=c("Date"))
View(TOURISMdta)
th <-
TOURISMdta <- left_join(ARENA, MAISTRA,VALAMAR, by=c("Date")) %>% left_join(.,VALAMAR, by=c("Date"))
th <-
TOURISMdta <- left_join(ARENA, MAISTRA,VALAMAR, by=c("Date")) %>%
left_join(.,VALAMAR, by=c("Date")) %>%
drop_na()
library(dplyr)
th <-
TOURISMdta <- left_join(ARENA, MAISTRA,VALAMAR, by=c("Date")) %>%
left_join(.,VALAMAR, by=c("Date")) %>%
drop_na()
library(tidyr)
th <-
TOURISMdta <- left_join(ARENA, MAISTRA,VALAMAR, by=c("Date")) %>%
left_join(.,VALAMAR, by=c("Date")) %>%
drop_na()
th <-
TOURISMdta <- left_join(ARENA, MAISTRA,VALAMAR, by=c("Date")) %>%
left_join(.,VALAMAR, by=c("Date")) %>%
drop_na() %>%
arrange(desc(Date)) %>%
distinct(Date)
th <-
TOURISMdta <- left_join(ARENA, MAISTRA,VALAMAR, by=c("Date")) %>%
left_join(.,VALAMAR, by=c("Date")) %>%
drop_na() %>%
arrange(desc(Date)) %>%
filter(distinct(Date))
th <-
TOURISMdta <- left_join(ARENA, MAISTRA,VALAMAR, by=c("Date")) %>%
left_join(.,VALAMAR, by=c("Date")) %>%
drop_na() %>%
arrange(desc(Date)) %>%
filter(unique(Date))
TOURISMdta <- left_join(ARENA, MAISTRA,VALAMAR, by=c("Date")) %>%
left_join(.,VALAMAR, by=c("Date")) %>%
drop_na()
TOURISMdta <- left_join(ARENA, MAISTRA,VALAMAR, by=c("Date"))
TOURISMdta <- left_join(ARENA, MAISTRA,VALAMAR, by=c("Date")) %>%
inner_join(.,VALAMAR, by=c("Date"))
TOURISMdta <- left_join(ARENA, MAISTRA,VALAMAR, by=c("Date")) %>%
inner_join(.,VALAMAR, by=c("Date")) %>%
drop_na()
TOURISMdta <- zoo(TOURISMdta[,-1], order.by = TOURISMdta$Date)
th <-
TOURISMdta <- left_join(ARENA, MAISTRA,VALAMAR, by=c("Date")) %>%
inner_join(.,VALAMAR, by=c("Date")) %>%
distinct(Date, .keep_all=TRUE)
TOURISMdta <- zoo(TOURISMdta[,-1], order.by = TOURISMdta$Date)
str(TOURISMdta)
Quandl.api_key("jvwknzKzNdiuqGPCyXcT")
library(Quandl)
Quandl.api_key("jvwknzKzNdiuqGPCyXcT")
Crobex <- Quandl("ZAGREBSE/CROBEX", type = "zoo",collapse = "daily",start_date = "2019-01-02", end_date = Sys.Date())
rates <- get_rates_from_prices(TOURISMdta,
quote = "Close",
multi_day = TRUE,
compounding = "continuous")
rates_indx <- get_rates_from_prices(Crobex,
quote = "Close",
multi_day = TRUE,
compounding = "continuous")
securities_returns <- apply_market_model(
rates = rates,
regressor = rates_indx,
same_regressor_for_all = TRUE,
market_model = "sim",
estimation_method = "ols",
estimation_start = as.Date("2019-01-01"),
estimation_end = as.Date("2020-01-23")
)
parametric_tests(list_of_returns = securities_returns,
event_start = as.Date("2020-02-24"),
event_end = as.Date("2020-04-14"))
nonparametric_tests(list_of_returns = securities_returns,
event_start = as.Date("2001-09-11"),
event_end = as.Date("2001-09-28"))
nonparametric_tests(list_of_returns = securities_returns,
event_start = as.Date("2020-02-24"),
event_end = as.Date("2020-04-14"))
rm(list=ls())
library(eventstudies)
data(SplitDates)
str(SplitDates)
View(SplitDates)
SplitD <- as.data.frame(Stock = c("ARNT", "MAIS", "RIVP"),
Date = seq(as.Date("020-02-24"), by = "day", length.out = 40))
SplitD <- as.data.frame(Date = seq(as.Date("020-02-24"), by = "day", length.out = 40))
SplitD <- as.data.frame(Date = seq(as.Date("2020-02-24"), by = "day", length.out = 40))
seq(as.Date("2020-02-24"), by = "day", length.out = 40)
SplitD <- as.data.frame(Date = seq(as.Date("2020-02-24"), by = "day", length.out = 40))
Stock = c("ARNT", "MAIS", "RIVP"),
ARNT = rep("ARNT",40)
Date = rep(seq(as.Date("2020-02-24"), by = "day", length.out = 40),3)
Name = cbind(ARNT,MAIS,RIVP)
ARNT = rep("ARNT",40)
MAIS = rep("MAIS",40)
RIVP = rep("RIVP",40)
Name = cbind(ARNT,MAIS,RIVP)
SplitD <- as.data.frame(Name,Date)
View(SplitD)
Date = rep(seq(as.Date("2020-02-24"), by = "day", length.out = 40),3)
Name = rbind(ARNT,MAIS,RIVP)
Date = rep(seq(as.Date("2020-02-24"), by = "day", length.out = 40),3)
SplitD <- as.data.frame(Name,Date)
View(SplitD)
SplitD <- as.data.frame(Name=Name,Date=Date)
SplitD <- as.data.frame(Name = rbind(ARNT,MAIS,RIVP),Date=Date)
SplitD <- as.data.frame(Name = rbind(ARNT,MAIS,RIVP))
Name
str(name)
str(Name)
rep("RIVP", 40))
SplitD <- data.frame(Name=c(rep("ARNT", 40),
rep("MAIS", 40),
rep("RIVP", 40)))
View(SplitD)
SplitD <- data.frame(Name=c(rep("ARNT", 40),
rep("MAIS", 40),
rep("RIVP", 40)),
Date = rep(seq(as.Date("2020-02-24"), by = "day", length.out = 40),3))
View(SplitD)
str(StockPriceReturns)
data(StockPriceReturns)
str(StockPriceReturns)
StockPriceReturns
r <- GET("https://zse.hr/json/securityHistory/HRARNTRA0004/2019-01-01/2021-04-13/hr?trading_model_id=ALL")
response <- content(r, as = "text", encoding = "UTF-8")
ARENA <- fromJSON(response, flatten = TRUE) %>%
data.frame() %>%
select(Date = rows.date, ARNT = rows.last_price ) %>%
mutate( Date = gsub("[.]$","", Date)) %>%
mutate( Date = as.Date(Date,"%d.%m.%Y"),
ARNT = as.numeric(gsub("(.*),.*", "\\1", ARNT)))
r <- GET("https://zse.hr/json/securityHistory/HRMAISRA0007/2019-01-01/2021-04-13/hr?trading_model_id=ALL")
response <- content(r, as = "text", encoding = "UTF-8")
MAISTRA <- fromJSON(response, flatten = TRUE) %>%
data.frame() %>%
select(Date = rows.date, MAIS = rows.last_price ) %>%
mutate( Date = gsub("[.]$","", Date)) %>%
mutate( Date = as.Date(Date,"%d.%m.%Y"),
MAIS = as.numeric(gsub("(.*),.*", "\\1", MAIS)))
r <- GET("https://zse.hr/json/securityHistory/HRRIVPRA0000/2019-01-01/2021-04-13/hr?trading_model_id=ALL")
response <- content(r, as = "text", encoding = "UTF-8")
VALAMAR <- fromJSON(response, flatten = TRUE) %>%
data.frame() %>%
select(Date = rows.date, RIVP = rows.last_price ) %>%
mutate( Date = gsub("[.]$","", Date)) %>%
mutate( Date = as.Date(Date,"%d.%m.%Y"),
RIVP = as.numeric(gsub("(.*),.*", "\\1", RIVP)))
TOURISMdta <- left_join(ARENA, MAISTRA,VALAMAR, by=c("Date")) %>%
inner_join(.,VALAMAR, by=c("Date")) %>%
distinct(Date, .keep_all=TRUE)
TOURISMdta <- zoo(TOURISMdta[,-1], order.by = TOURISMdta$Date)
rates <- get_rates_from_prices(TOURISMdta,
quote = "Close",
multi_day = TRUE,
compounding = "continuous")
rates
Returns <- returns %>% drop_na()
Returns <- rates %>% drop_na()
Returns <- na.omit(rates)
Returns
View(Returns)
es <- eventstudy(firm.returns = Returns,
event.list = SplitD,
event.window = 10,
type = "None",
to.remap = TRUE,
remap = "cumsum",
inference = TRUE,
inference.strategy = "bootstrap")
SplitD <- data.frame(Name=c("ARNT","MAIS","RIVP"),
Date = rep(as.Date("2020-02-24"),3))
str(SplitD)
SplitD <- data.frame(Name=c("ARNT","MAIS","RIVP"),
Date = rep(as.Date("2020-02-24"),3))
es <- eventstudy(firm.returns = Returns,
event.list = SplitD,
event.window = 10,
type = "None",
to.remap = TRUE,
remap = "cumsum",
inference = TRUE,
inference.strategy = "bootstrap")
str(Returns)
str(SplitD)
SplitD <- zoo(SplitD[,-1], order.by = SplitD$Date)
str(SplitDates)
str(StockPriceReturns)
SplitD <- data.frame(Name=c("ARNT","MAIS","RIVP"),
Date = rep(as.Date("2020-02-24"),3))
es <- eventstudy(firm.returns = Returns,
event.list = SplitD,
event.window = 10,
type = "None",
to.remap = TRUE,
remap = "cumsum",
inference = TRUE,
inference.strategy = "bootstrap")
str(SplitDates)
SplitD <- data.frame(name=c("ARNT","MAIS","RIVP"),
when = rep(as.Date("2020-02-24"),3))
es <- eventstudy(firm.returns = Returns,
event.list = SplitD,
event.window = 10,
type = "None",
to.remap = TRUE,
remap = "cumsum",
inference = TRUE,
inference.strategy = "bootstrap")
plot(es)
es <- eventstudy(firm.returns = Returns,
event.list = SplitD,
event.window = 5,
type = "None",
to.remap = TRUE,
remap = "cumsum",
inference = TRUE,
inference.strategy = "bootstrap")
plot(es)
es <- eventstudy(firm.returns = Returns,
event.list = SplitD,
event.window = 20,
type = "None",
to.remap = TRUE,
remap = "cumsum",
inference = TRUE,
inference.strategy = "bootstrap")
plot(es)
es <- eventstudy(firm.returns = Returns,
event.list = SplitD,
event.window = 40,
type = "None",
to.remap = TRUE,
remap = "cumsum",
inference = TRUE,
inference.strategy = "bootstrap")
plot(es)
es <- eventstudy(firm.returns = Returns,
event.list = SplitD,
event.window = 40,
type = "marketModel",
to.remap = TRUE,
remap = "cumsum",
inference = TRUE,
inference.strategy = "bootstrap")
rates_indx <- get_rates_from_prices(Crobex,
quote = "Close",
multi_day = TRUE,
compounding = "continuous")
Quandl.api_key("jvwknzKzNdiuqGPCyXcT")
Crobex <- Quandl("ZAGREBSE/CROBEX", type = "zoo",collapse = "daily",start_date = "2019-01-02", end_date = Sys.Date())
rates <- get_rates_from_prices(TOURISMdta,
quote = "Close",
multi_day = TRUE,
compounding = "continuous")
rates_indx <- get_rates_from_prices(Crobex,
quote = "Close",
multi_day = TRUE,
compounding = "continuous")
OtherReturns
data(OtherReturns)
str(OtherReturns)
View(OtherReturns)
View(rates_indx)
model.args = list(market.returns=rates_indx$V1)
names(rates_indx)
names(OtherReturns)
colnames(rates_indx) <- "Crobex"
names(rates_indx)
model.args = list(market.returns=rates_indx$Crobex)
es <- eventstudy(firm.returns = Returns,
event.list = SplitD,
event.window = 40,
type = "marketModel",
to.remap = TRUE,
remap = "cumsum",
inference = TRUE,
inference.strategy = "bootstrap",
model.args = list(market.returns=rates_indx$Crobex))
plot(es)
gold <- Quandl("LBMA/GOLD", type = "zoo", collapse = "daily", start_date = "2019-01-01",end_date = Sys.Date())
add_indx <- get_rates_from_prices(gold,
quote = "Close",
multi_day = TRUE,
compounding = "continuous")
colnames(add_indx) <- "gold"
add_indx
gold <- gold[,gold$`EURO (AM`]
gold <- gold[,gold$`EURO (AM)`]
View(gold)
names(gold)
gold <- gold[,gold$"EURO (AM)"]
gold <- gold[,5]
add_indx <- get_rates_from_prices(gold,
quote = "Close",
multi_day = TRUE,
compounding = "continuous")
colnames(add_indx) <- "gold"
names(gold)
colnames(add_indx) <- "gold"
names(add_indx)
es2 <- eventstudy(firm.returns = Returns,
event.list = SplitD,
event.window = 40,
type = "marketModel",
to.remap = TRUE,
remap = "cumsum",
inference = TRUE,
inference.strategy = "bootstrap",
model.args = list(market.returns=rates_indx$Crobex),
others=add_indx$gold,
market.returns.purge=TRUE)
es2 <- eventstudy(firm.returns = Returns,
event.list = SplitD,
event.window = 40,
type = "marketModel",
to.remap = TRUE,
remap = "cumsum",
inference = TRUE,
inference.strategy = "bootstrap",
model.args = list(market.returns=rates_indx$Crobex,
others=add_indx$gold,
market.returns.purge=TRUE))
plot(es2)
es3 <- eventstudy(firm.returns = Returns,
event.list = SplitD,
event.window = 40,
type = "marketModel",
to.remap = TRUE,
remap = "cumsum",
inference = TRUE,
inference.strategy = "bootstrap",
model.args = list(market.returns=rates_indx$Crobex,
others=add_indx$gold,
market.returns.purge=TRUE))
plot(es3)
es2 <- eventstudy(firm.returns = Returns,
event.list = SplitD,
event.window = 40,
type = "marketModel",
to.remap = TRUE,
remap = "cumsum",
inference = TRUE,
inference.strategy = "bootstrap",
model.args = list(market.returns=rates_indx$Crobex))
plot(es2)
es <- eventstudy(firm.returns = Returns,
event.list = SplitD,
event.window = 40,
type = "None",
to.remap = TRUE,
remap = "cumsum",
inference = TRUE,
inference.strategy = "bootstrap")
plot(es)
