select(-Value)
CrobexInd <- Quandl("ZAGREBSE/CROBEXINDUSTRIJA", type = "raw",collapse = "daily",start_date = "2019-01-02", end_date = Sys.Date()) %>%
arrange(Date) %>%
mutate(CrobexInd = ((Value - lag(Value))/Value)*100) %>%
drop_na() %>%
select(-Value)
CrobexNutr <- Quandl("ZAGREBSE/CROBEXNUTRIS", type = "raw",collapse = "daily",start_date = "2019-01-02", end_date = Sys.Date()) %>%
arrange(Date) %>%
mutate(CrobexNutr = ((Value - lag(Value))/Value)*100) %>%
drop_na() %>%
select(-Value)
CrobexTur <- Quandl("ZAGREBSE/CROBEXTURIST", type = "raw",collapse = "daily",start_date = "2019-01-02", end_date = Sys.Date()) %>%
arrange(Date) %>%
mutate(CrobexTur = ((Value - lag(Value))/Value)*100) %>%
drop_na() %>%
select(-Value)
CrobexTr <- Quandl("ZAGREBSE/CROBEXTR", type = "raw",collapse = "daily",start_date = "2019-01-02", end_date = Sys.Date()) %>%
arrange(Date) %>%
mutate(CrobexTr = ((Value - lag(Value))/Value)*100) %>%
drop_na() %>%
select(-Value)
market <- CrobexKonstr %>%
left_join(.,CrobexInd, by = "Date") %>%
left_join(.,CrobexNutr, by = "Date") %>%
left_join(.,CrobexTur, by = "Date") %>%
left_join(.,CrobexTr, by = "Date") %>%
gather( Index,Return, -Date)
View(market)
TOURISMdta <- stockDF %>% select(Date = date, Close = last_price, url) %>%
mutate(Date = gsub("[.]$","", Date)) %>%
mutate(Ticker = str_sub(.$url,-37,-34)) %>%
mutate(Close = as.numeric(gsub("(.*),.*", "\\1", Close))) %>%
select(-url) %>%
group_by(Ticker) %>%
dplyr::mutate(n = n()) %>%
ungroup() %>%
dplyr::filter(n > 100) %>%
dplyr::select(-n) %>%
group_by(Ticker) %>%
distinct(Date, .keep_all=TRUE) %>%
ungroup() %>%
tidyr::spread(Ticker, Close, fill=0) %>%
mutate( Date = as.Date(Date,"%d.%m.%Y")) %>%
arrange(desc(Date))
TOURISMdta <- zoo(TOURISMdta[,-1], order.by = TOURISMdta$Date)
market %>%
mutate(dr = cut(Date, breaks = c(range(Date),
as.Date(c("2020-02-12", "2020-04-08","2021-04-15"))), include.lowest=TRUE)) %>% #View()
mutate(Pandemic =  case_when(
.$dr == "2019-01-03" ~ "Pre",
.$dr == "2020-02-12" ~ "Ongoing",
.$dr == "2020-04-08" ~ "Post")) %>%  #
filter(Date < "2021-04-15") %>%
select(-dr) %>% arrange (Date) %>%  #
group_by(Pandemic, Index) %>%
summarise(Return_sum = sum(Return),
Return_avg = mean(Return),
Return_sd = sd(Return),
Return_min = min(Return),
Return_max = max(Return)) %>%
mutate_if(is.numeric, round, 3) %>% kable()
View(TOURISMdta)
rates <- get_rates_from_prices(TOURISMdta,
quote = "Close",
multi_day = TRUE,
compounding = "continuous")
ratesDF <- data.frame(rates)
ratesDF <- data.frame(Date = rownames(ratesDF), rates) %>% mutate(Date = as.Date(Date,"%Y-%m-%d"))
View(ratesDF)
rownames(ratesDF) <- NULL
ratesDF[sapply(ratesDF, is.infinite)] <- NA
ratesDF[sapply(ratesDF, is.nan)] <- NA
ratesDF[sapply(ratesDF, is.na)] <- 0
rates <-  zoo(ratesDF[,-1], order.by = ratesDF$Date)
View(rates)
rates_indx <- get_rates_from_prices(Crobex,
quote = "Close",
multi_day = TRUE,
compounding = "continuous")
colnames(rates_indx) <- "Crobex"
add_indx <- get_rates_from_prices(gold,
quote = "Close",
multi_day = TRUE,
compounding = "continuous")
colnames(add_indx) <- "gold"
View(rates_indx)
plot(rates_indx)
mean(rates_indx)
securities_returns <- apply_market_model(
rates = rates,
regressor = rates_indx,
same_regressor_for_all = TRUE,
market_model = "sim",
estimation_method = "ols",
estimation_start = as.Date("2019-01-01"),
estimation_end = as.Date("2020-01-23")
)
parametric_tests(list_of_returns = securities_returns,
event_start = as.Date("2020-02-24"),
event_end = as.Date("2020-04-14"))
range(market$Date)
?apply_market_model
ISIN <- readxl::read_xlsx("./Data/ISIN_list.xlsx") %>% select(ISIN)
library(estudy2)
library(plotly)
library(TSstudio)
library(jsonlite)
library(plyr)
library(zoo)
library(httr)
library(plotly)
library(jsonlite)
library(dplyr)
library(tidyr)
library(Quandl)
library(stringr)
library(eventstudies)
library(stats)
library(kableExtra)
ISIN <- readxl::read_xlsx("./Data/ISIN_list.xlsx") %>% select(ISIN)
links <- c()
rawDta <- c()
for( i in ISIN){
links <- paste0('https://zse.hr/json/securityHistory/', i,
'/2019-01-01/2021-04-13/hr?trading_model_id=ALL')
}
for (i in links){
rawDta[[i]] <- fromJSON(content(GET(i), as = "text", encoding = "UTF-8"))
}
stockDF <- lapply(rawDta, '[[', "rows") %>% bind_rows()
source("./Secret/Passkey.R")
Crobex <- Quandl("ZAGREBSE/CROBEX", type = "zoo",collapse = "daily",start_date = "2019-01-02", end_date = Sys.Date())
gold <- Quandl("LBMA/GOLD", type = "zoo", collapse = "daily", start_date = "2019-01-01",end_date = Sys.Date())
gold <- gold[,5]
options(scipen = 999,pillar.sigfigs=3)
CrobexKonstr <- Quandl("ZAGREBSE/CROBEXKONSTRUKT", type = "raw",collapse = "daily",start_date = "2019-01-02", end_date = Sys.Date()) %>%
arrange(Date) %>%
mutate(CrobexKonstr = ((Value - lag(Value))/Value)*100) %>%
drop_na() %>%
select(-Value)
CrobexInd <- Quandl("ZAGREBSE/CROBEXINDUSTRIJA", type = "raw",collapse = "daily",start_date = "2019-01-02", end_date = Sys.Date()) %>%
arrange(Date) %>%
mutate(CrobexInd = ((Value - lag(Value))/Value)*100) %>%
drop_na() %>%
select(-Value)
CrobexNutr <- Quandl("ZAGREBSE/CROBEXNUTRIS", type = "raw",collapse = "daily",start_date = "2019-01-02", end_date = Sys.Date()) %>%
arrange(Date) %>%
mutate(CrobexNutr = ((Value - lag(Value))/Value)*100) %>%
drop_na() %>%
select(-Value)
CrobexTur <- Quandl("ZAGREBSE/CROBEXTURIST", type = "raw",collapse = "daily",start_date = "2019-01-02", end_date = Sys.Date()) %>%
arrange(Date) %>%
mutate(CrobexTur = ((Value - lag(Value))/Value)*100) %>%
drop_na() %>%
select(-Value)
CrobexTr <- Quandl("ZAGREBSE/CROBEXTR", type = "raw",collapse = "daily",start_date = "2019-01-02", end_date = Sys.Date()) %>%
arrange(Date) %>%
mutate(CrobexTr = ((Value - lag(Value))/Value)*100) %>%
drop_na() %>%
select(-Value)
market <- CrobexKonstr %>%
left_join(.,CrobexInd, by = "Date") %>%
left_join(.,CrobexNutr, by = "Date") %>%
left_join(.,CrobexTur, by = "Date") %>%
left_join(.,CrobexTr, by = "Date") %>%
gather( Index,Return, -Date)
#range(market$Date)
TOURISMdta <- stockDF %>% select(Date = date, Close = last_price, url) %>%
mutate(Date = gsub("[.]$","", Date)) %>%
mutate(Ticker = str_sub(.$url,-37,-34)) %>%
mutate(Close = as.numeric(gsub("(.*),.*", "\\1", Close))) %>%
select(-url) %>%
group_by(Ticker) %>%
dplyr::mutate(n = n()) %>%
ungroup() %>%
dplyr::filter(n > 100) %>%
dplyr::select(-n) %>%
group_by(Ticker) %>%
distinct(Date, .keep_all=TRUE) %>%
ungroup() %>%
tidyr::spread(Ticker, Close, fill=0) %>%
mutate( Date = as.Date(Date,"%d.%m.%Y")) %>%
arrange(desc(Date))
TOURISMdta <- zoo(TOURISMdta[,-1], order.by = TOURISMdta$Date)
market %>%
mutate(dr = cut(Date, breaks = c(range(Date),
as.Date(c("2020-02-12", "2020-04-08","2021-04-15"))), include.lowest=TRUE)) %>% #View()
mutate(Pandemic =  case_when(
.$dr == "2019-01-03" ~ "Pre",
.$dr == "2020-02-12" ~ "Ongoing",
.$dr == "2020-04-08" ~ "Post")) %>%  #
filter(Date < "2021-04-15") %>%
select(-dr) %>% arrange (Date) %>%  #
group_by(Pandemic, Index) %>%
summarise(Return_sum = sum(Return),
Return_avg = mean(Return),
Return_sd = sd(Return),
Return_min = min(Return),
Return_max = max(Return)) %>%
mutate_if(is.numeric, round, 3) %>% kable()
rates <- get_rates_from_prices(TOURISMdta,
quote = "Close",
multi_day = TRUE,
compounding = "continuous")
ratesDF <- data.frame(rates)
ratesDF <- data.frame(Date = rownames(ratesDF), rates) %>% mutate(Date = as.Date(Date,"%Y-%m-%d"))
rownames(ratesDF) <- NULL
ratesDF[sapply(ratesDF, is.infinite)] <- NA
ratesDF[sapply(ratesDF, is.nan)] <- NA
ratesDF[sapply(ratesDF, is.na)] <- 0
rates <-  zoo(ratesDF[,-1], order.by = ratesDF$Date)
rates_indx <- get_rates_from_prices(Crobex,
quote = "Close",
multi_day = TRUE,
compounding = "continuous")
colnames(rates_indx) <- "Crobex"
add_indx <- get_rates_from_prices(gold,
quote = "Close",
multi_day = TRUE,
compounding = "continuous")
colnames(add_indx) <- "gold"
securities_returns <- apply_market_model(
rates = rates,
regressor = rates_indx,
same_regressor_for_all = TRUE,
market_model = "sim",
estimation_method = "ols",
estimation_start = as.Date("2019-01-01"),
estimation_end = as.Date("2020-01-23")
)
parametric_tests(list_of_returns = securities_returns,
event_start = as.Date("2020-02-24"),
event_end = as.Date("2020-04-14"))
SplitD <- data.frame(name=colnames(rates),
when = rep(as.Date("2020-02-24"),12))
Returns <- na.omit(rates)
es <- eventstudy(firm.returns = Returns,
event.list = SplitD,
event.window = 40,
type = "None",
to.remap = TRUE,
remap = "cumsum",
inference = TRUE,
inference.strategy = "bootstrap")
plot(es)
library(estudy2)
library(plotly)
library(TSstudio)
library(jsonlite)
library(plyr)
library(zoo)
library(httr)
library(plotly)
library(jsonlite)
library(dplyr)
library(tidyr)
library(Quandl)
library(stringr)
library(eventstudies)
library(stats)
library(kableExtra)
ISIN <- readxl::read_xlsx("./Data/ISIN_list.xlsx") %>% select(ISIN)
links <- c()
rawDta <- c()
for( i in ISIN){
links <- paste0('https://zse.hr/json/securityHistory/', i,
'/2019-01-01/2021-04-13/hr?trading_model_id=ALL')
}
for (i in links){
rawDta[[i]] <- fromJSON(content(GET(i), as = "text", encoding = "UTF-8"))
}
stockDF <- lapply(rawDta, '[[', "rows") %>% bind_rows()
source("./Secret/Passkey.R")
Crobex <- Quandl("ZAGREBSE/CROBEX", type = "zoo",collapse = "daily",start_date = "2019-01-02", end_date = Sys.Date())
gold <- Quandl("LBMA/GOLD", type = "zoo", collapse = "daily", start_date = "2019-01-01",end_date = Sys.Date())
gold <- gold[,5]
options(scipen = 999,pillar.sigfigs=3)
CrobexKonstr <- Quandl("ZAGREBSE/CROBEXKONSTRUKT", type = "raw",collapse = "daily",start_date = "2019-01-02", end_date = Sys.Date()) %>%
arrange(Date) %>%
mutate(CrobexKonstr = ((Value - lag(Value))/Value)*100) %>%
drop_na() %>%
select(-Value)
CrobexInd <- Quandl("ZAGREBSE/CROBEXINDUSTRIJA", type = "raw",collapse = "daily",start_date = "2019-01-02", end_date = Sys.Date()) %>%
arrange(Date) %>%
mutate(CrobexInd = ((Value - lag(Value))/Value)*100) %>%
drop_na() %>%
select(-Value)
CrobexNutr <- Quandl("ZAGREBSE/CROBEXNUTRIS", type = "raw",collapse = "daily",start_date = "2019-01-02", end_date = Sys.Date()) %>%
arrange(Date) %>%
mutate(CrobexNutr = ((Value - lag(Value))/Value)*100) %>%
drop_na() %>%
select(-Value)
CrobexTur <- Quandl("ZAGREBSE/CROBEXTURIST", type = "raw",collapse = "daily",start_date = "2019-01-02", end_date = Sys.Date()) %>%
arrange(Date) %>%
mutate(CrobexTur = ((Value - lag(Value))/Value)*100) %>%
drop_na() %>%
select(-Value)
CrobexTr <- Quandl("ZAGREBSE/CROBEXTR", type = "raw",collapse = "daily",start_date = "2019-01-02", end_date = Sys.Date()) %>%
arrange(Date) %>%
mutate(CrobexTr = ((Value - lag(Value))/Value)*100) %>%
drop_na() %>%
select(-Value)
market <- CrobexKonstr %>%
left_join(.,CrobexInd, by = "Date") %>%
left_join(.,CrobexNutr, by = "Date") %>%
left_join(.,CrobexTur, by = "Date") %>%
left_join(.,CrobexTr, by = "Date") %>%
gather( Index,Return, -Date)
#range(market$Date)
TOURISMdta <- stockDF %>% select(Date = date, Close = last_price, url) %>%
mutate(Date = gsub("[.]$","", Date)) %>%
mutate(Ticker = str_sub(.$url,-37,-34)) %>%
mutate(Close = as.numeric(gsub("(.*),.*", "\\1", Close))) %>%
select(-url) %>%
group_by(Ticker) %>%
dplyr::mutate(n = n()) %>%
ungroup() %>%
dplyr::filter(n > 100) %>%
dplyr::select(-n) %>%
group_by(Ticker) %>%
distinct(Date, .keep_all=TRUE) %>%
ungroup() %>%
tidyr::spread(Ticker, Close, fill=0) %>%
mutate( Date = as.Date(Date,"%d.%m.%Y")) %>%
arrange(desc(Date))
TOURISMdta <- zoo(TOURISMdta[,-1], order.by = TOURISMdta$Date)
market %>%
mutate(dr = cut(Date, breaks = c(range(Date),
as.Date(c("2020-02-12", "2020-04-08","2021-04-15"))), include.lowest=TRUE)) %>% #View()
mutate(Pandemic =  case_when(
.$dr == "2019-01-03" ~ "Pre",
.$dr == "2020-02-12" ~ "Ongoing",
.$dr == "2020-04-08" ~ "Post")) %>%  #
filter(Date < "2021-04-15") %>%
select(-dr) %>% arrange (Date) %>%  #
group_by(Pandemic, Index) %>%
summarise(Return_sum = sum(Return),
Return_avg = mean(Return),
Return_sd = sd(Return),
Return_min = min(Return),
Return_max = max(Return)) %>%
mutate_if(is.numeric, round, 3) %>% kable()
rates <- get_rates_from_prices(TOURISMdta,
quote = "Close",
multi_day = TRUE,
compounding = "continuous")
ratesDF <- data.frame(rates)
ratesDF <- data.frame(Date = rownames(ratesDF), rates) %>% mutate(Date = as.Date(Date,"%Y-%m-%d"))
rownames(ratesDF) <- NULL
ratesDF[sapply(ratesDF, is.infinite)] <- NA
ratesDF[sapply(ratesDF, is.nan)] <- NA
ratesDF[sapply(ratesDF, is.na)] <- 0
rates <-  zoo(ratesDF[,-1], order.by = ratesDF$Date)
rates_indx <- get_rates_from_prices(Crobex,
quote = "Close",
multi_day = TRUE,
compounding = "continuous")
colnames(rates_indx) <- "Crobex"
add_indx <- get_rates_from_prices(gold,
quote = "Close",
multi_day = TRUE,
compounding = "continuous")
colnames(add_indx) <- "gold"
SplitD <- data.frame(name=colnames(rates),
when = rep(as.Date("2020-02-24"),12))
Returns <- na.omit(rates)
es <- eventstudy(firm.returns = Returns,
event.list = SplitD,
event.window = 10,
type = "None",
to.remap = TRUE,
remap = "cumsum",
inference = TRUE,
inference.strategy = "bootstrap")
plot(es)
es <- eventstudy(firm.returns = Returns,
event.list = SplitD,
event.window = 20,
type = "None",
to.remap = TRUE,
remap = "cumsum",
inference = TRUE,
inference.strategy = "bootstrap")
plot(es)
es <- eventstudy(firm.returns = Returns,
event.list = SplitD,
event.window = 40,
type = "None",
to.remap = TRUE,
remap = "cumsum",
inference = TRUE,
inference.strategy = "bootstrap")
plot(es)
es <- eventstudy(firm.returns = Returns,
event.list = SplitD,
event.window = 40,
type = "marketMOdel",
to.remap = TRUE,
remap = "cumsum",
inference = TRUE,
inference.strategy = "bootstrap")
plot(es)
es <- eventstudy(firm.returns = Returns,
event.list = SplitD,
event.window = 40,
type = "marketModel",
to.remap = TRUE,
remap = "cumsum",
inference = TRUE,
inference.strategy = "bootstrap")
es2 <- eventstudy(firm.returns = Returns,
event.list = SplitD,
event.window = 40,
type = "marketModel",
to.remap = TRUE,
remap = "cumsum",
inference = TRUE,
inference.strategy = "bootstrap",
model.args = list(market.returns=rates_indx$Crobex))
plot(es2)
securities_returns <- apply_market_model(
rates = rates,
regressor = rates_indx,
same_regressor_for_all = TRUE,
market_model = "sim",
estimation_method = "ols",
estimation_start = as.Date("2019-01-01"),
estimation_end = as.Date("2020-01-23")
)
parametric_tests(list_of_returns = securities_returns,
event_start = as.Date("2020-02-24"),
event_end = as.Date("2020-04-14"))
pt <- parametric_tests(list_of_returns = securities_returns,
event_start = as.Date("2020-02-24"),
event_end = as.Date("2020-04-14"))
augment(pt)
library(brrom)
library(broom)
augment(pt)
str(pt)
pt
View(pt)
nt <- nonparametric_tests(list_of_returns = securities_returns,
event_start = as.Date("2020-02-24"),
event_end = as.Date("2020-04-14"))
nt
nt
View(nt)
parametric_tests(list_of_returns = securities_returns,
event_start = as.Date("2020-03-11"),
event_end = as.Date("2020-03-20"))
parametric_tests(list_of_returns = securities_returns,
event_start = as.Date("2020-03-01"),
event_end = as.Date("2020-03-20"))
_
_
parametric_tests(list_of_returns = securities_returns,
event_start = as.Date("2020-03-01"),
event_end = as.Date("2020-03-20"))
parametric_tests(list_of_returns = securities_returns,
event_start = as.Date("2020-03-01"),
event_end = as.Date("2020-03-20"))
nonparametric_tests(list_of_returns = securities_returns,
event_start = as.Date("2020-03-01"),
event_end = as.Date("2020-04-14"))
parametric_tests(list_of_returns = securities_returns,
event_start = as.Date("2020-02-16"),
event_end = as.Date("2020-03-20"))
parametric_tests(list_of_returns = securities_returns,
event_start = as.Date("2020-02-21"),
event_end = as.Date("2020-03-18"))
parametric_tests(list_of_returns = securities_returns,
event_start = as.Date("2020-02-21"),
event_end = as.Date("2020-03-26"))
parametric_tests(list_of_returns = securities_returns,
event_start = as.Date("2020-02-21"),
event_end = as.Date("2020-03-26"))
parametric_tests(list_of_returns = securities_returns,
event_start = as.Date("2020-02-14"),
event_end = as.Date("2020-03-26"))
nonparametric_tests(list_of_returns = securities_returns,
event_start = as.Date("2020-02-14"),
event_end = as.Date("2020-03-26"))
securities_returns <- apply_market_model(
rates = rates,
regressor = rates_indx,
same_regressor_for_all = TRUE,
market_model = "sim",
estimation_method = "ols",
estimation_start = as.Date("2020-01-01"),
estimation_end = as.Date("2020-01-23")
)
pt <- parametric_tests(list_of_returns = securities_returns,
event_start = as.Date("2020-02-14"),
event_end = as.Date("2020-03-26"))
pt
parametric_tests(list_of_returns = securities_returns,
event_start = as.Date("2020-02-14"),
event_end = as.Date("2020-03-26"))
securities_returns <- apply_market_model(
rates = rates,
regressor = rates_indx,
same_regressor_for_all = TRUE,
market_model = "sim",
estimation_method = "ols",
estimation_start = as.Date("2019-01-01"),
estimation_end = as.Date("2020-01-23")
)
pt <- parametric_tests(list_of_returns = securities_returns,
event_start = as.Date("2020-02-14"),
event_end = as.Date("2020-03-26"))
pt
