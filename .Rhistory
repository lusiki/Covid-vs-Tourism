geom_hline(yintercept = 0) +
scale_y_continuous(name="Cum change in response series %") +
scale_x_discrete(name ="Event Day", breaks=1:5,
labels=c("-4", "-2", "0", "2","4")) +
theme_bw()
ggplot(result1,aes(x = EventDate)) +
geom_line(aes(y=Mean,)) +
geom_line(aes(y=ci1), linetype="twodash") +
geom_line(aes(y=ci2), linetype="twodash") +
geom_vline(xintercept=0) +
geom_hline(yintercept = 0) +
scale_y_continuous(name="Cum change in response series %") +
scale_x_continuous(name ="Event Day", breaks=1:5,
labels=c("-4", "-2", "0", "2","4")) +
theme_bw()
result1
ggplot(result1,aes(x = EventDate)) +
geom_line(aes(y=Mean,)) +
geom_line(aes(y=ci1), linetype="twodash") +
geom_line(aes(y=ci2), linetype="twodash") +
geom_vline(xintercept=0) +
geom_hline(yintercept = 0) +
scale_y_continuous(name="Cum change in response series %") +
scale_x_continuous(name ="Event Day")
ggplot(result1,aes(x = EventDate)) +
geom_line(aes(y=Mean,)) +
geom_line(aes(y=ci1), linetype="twodash") +
geom_line(aes(y=ci2), linetype="twodash") +
geom_vline(xintercept=0) +
geom_hline(yintercept = 0) +
scale_y_continuous(name="Cum change in response series %") +
scale_x_continuous(name ="Event Day",breaks = 4)
ggplot(result1,aes(x = EventDate)) +
geom_line(aes(y=Mean,)) +
geom_line(aes(y=ci1), linetype="twodash") +
geom_line(aes(y=ci2), linetype="twodash") +
geom_vline(xintercept=0) +
geom_hline(yintercept = 0) +
scale_y_continuous(name="Cum change in response series %") +
scale_x_continuous(name ="Event Day")
ggplot(result1,aes(x = EventDate)) +
geom_line(aes(y=Mean,)) +
geom_line(aes(y=ci1), linetype="twodash") +
geom_line(aes(y=ci2), linetype="twodash") +
geom_vline(xintercept=0) +
geom_hline(yintercept = 0) +
scale_y_continuous(name="Cum change in response series %") +
scale_x_continuous(name ="Event Day",labels=c("-4", "-2", "0", "2","4"))
ggplot(result1,aes(x = EventDate)) +
geom_line(aes(y=Mean,)) +
geom_line(aes(y=ci1), linetype="twodash") +
geom_line(aes(y=ci2), linetype="twodash") +
geom_vline(xintercept=0) +
geom_hline(yintercept = 0) +
scale_y_continuous(name="Cum change in response series %") +
scale_x_continuous(name ="Event Day",labels=c("-4", "-2", "0", "2","4")) +
theme_bw() +
ggtitle("Event study for the first COVID19 incidence in Italy")
result2 <- as.data.frame(es2$result) %>%
mutate(EventDate = seq(-4,5,1)) %>%
rename(ci1 = "2.5%",ci2 = "97.5%")
gg2 <- ggplot(result2,aes(x = EventDate)) +
geom_line(aes(y=Mean,)) +
geom_line(aes(y=ci1), linetype="twodash") +
geom_line(aes(y=ci2), linetype="twodash") +
geom_vline(xintercept=0) +
geom_hline(yintercept = 0) +
scale_y_continuous(name="Cum change in response series %") +
scale_x_continuous(name ="Event Day",labels=c("-4", "-2", "0", "2","4")) +
theme_bw() +
ggtitle("")
gg2
gg2 <- ggplot(result2,aes(x = EventDate)) +
geom_line(aes(y=Mean,)) +
geom_line(aes(y=ci1), linetype="twodash") +
geom_line(aes(y=ci2), linetype="twodash") +
geom_vline(xintercept=0) +
#  geom_hline(yintercept = 0) +
scale_y_continuous(name="Cum change in response series %") +
scale_x_continuous(name ="Event Day",labels=c("-4", "-2", "0", "2","4")) +
theme_bw() +
ggtitle("")
gg2
gg2
library(patchwork)
gg1+gg2
gg1 <- ggplot(result1,aes(x = EventDate)) +
geom_line(aes(y=Mean,)) +
geom_line(aes(y=ci1), linetype="twodash") +
geom_line(aes(y=ci2), linetype="twodash") +
geom_vline(xintercept=0) +
geom_hline(yintercept = 0) +
scale_y_continuous(name="Cum change in response series %") +
scale_x_continuous(name ="Event Day",labels=c("-4", "-2", "0", "2","4")) +
theme_bw() +
ggtitle("")
gg1+gg2
es3 <- eventstudy(firm.returns = Returns,
event.list = SplitD,
event.window = 5,
type = "marketModel",
to.remap = TRUE,
remap = "cumsum",
inference = TRUE,
inference.strategy = "bootstrap",
model.args = list(market.returns=rates_indx$Crobex))
result3 <- as.data.frame(es3$result) %>%
mutate(EventDate = seq(-4,5,1)) %>%
rename(ci1 = "2.5%",ci2 = "97.5%")
gg3 <- ggplot(result3,aes(x = EventDate)) +
geom_line(aes(y=Mean,)) +
geom_line(aes(y=ci1), linetype="twodash") +
geom_line(aes(y=ci2), linetype="twodash") +
geom_vline(xintercept=0) +
#  geom_hline(yintercept = 0) +
scale_y_continuous(name="Cum change in response series %") +
scale_x_continuous(name ="Event Day",labels=c("-4", "-2", "0", "2","4")) +
theme_bw() +
ggtitle("")
gg3
SplitD <- data.frame(name=colnames(rates),
when = rep(as.Date("2020-03-11"),12))
es4 <- eventstudy(firm.returns = Returns,
event.list = SplitD,
event.window = 5,
type = "marketModel",
to.remap = TRUE,
remap = "cumsum",
inference = TRUE,
inference.strategy = "bootstrap",
model.args = list(market.returns=rates_indx$Crobex))
result4 <- as.data.frame(es4$result) %>%
mutate(EventDate = seq(-4,5,1)) %>%
rename(ci1 = "2.5%",ci2 = "97.5%")
gg4 <- ggplot(result3,aes(x = EventDate)) +
geom_line(aes(y=Mean,)) +
geom_line(aes(y=ci1), linetype="twodash") +
geom_line(aes(y=ci2), linetype="twodash") +
geom_vline(xintercept=0) +
geom_hline(yintercept = 0) +
scale_y_continuous(name="Cum change in response series %") +
scale_x_continuous(name ="Event Day",labels=c("-4", "-2", "0", "2","4")) +
theme_bw() +
ggtitle("")
gg4
gg3
.$dr == "2019-01-03" ~ "Pre",
market %>%
mutate(dr = cut(Date, breaks = c(range(Date),
as.Date(c("2020-02-12", "2020-04-08","2021-04-15"))), include.lowest=TRUE)) %>% #View()
mutate(Pandemic =  case_when(
.$dr == "2019-01-03" ~ "Pre",
.$dr == "2020-02-12" ~ "Ongoing",
.$dr == "2020-04-08" ~ "Post")) %>%  #
filter(Date < "2021-04-15") %>%
select(-dr) %>% arrange (Date) %>%  #
group_by(Pandemic, Index) %>%
summarise("Total return" = sum(Return),
Return_avg = mean(Return),
Return_sd = sd(Return),
Return_min = min(Return),
Return_max = max(Return)) %>%
mutate_if(is.numeric, round, 3) %>% kable(caption = "Table 1: Overview of the market reaction to COVID-19 pandemic")
We investigate the effect of the spread of the pandemic into Europe on the tourist stocks in Croata!
PAKETI----
library(tidy)
library(quantmod)
library(Quandl)
library(tidyverse)
library(tidyquant)
library(timetk)
library(forecast)
library(highcharter)
library(coronavirus)
library(tidycovid19)
library(zoo)
library(kableExtra)
library(rvest)
library(tidyr)
library(reshape2)
library(tsoutliers)
library(tseries)
# PODACI----
source("./Secret/Passkey.R")
CrobexTur <- Quandl("ZAGREBSE/CROBEXTURIST",type = "xts",collapse = "daily",start_date = "2019-01-01", end_date = Sys.Date())
Crobex <- Quandl("ZAGREBSE/CROBEX", type = "xts",collapse = "daily",start_date = "2019-01-01", end_date = Sys.Date())
oil <- Quandl("OPEC/ORB",type = "xts",collapse = "daily",start_date = "2019-01-01", end_date = Sys.Date())
gold <- Quandl("LBMA/GOLD", type = "xts", collapse = "daily", start_date = "2019-01-01",end_date = Sys.Date())
getSymbols(c("^VIX","^GSPC", "^GDAXI", "^FTSE"),
from = as.Date("2019-01-01"),
to = as.Date(Sys.Date()))
# uvezi COVID-19
euCountries <- read_html("https://en.wikipedia.org/wiki/Member_state_of_the_European_Union") %>%
html_nodes("table.wikitable:nth-child(11)") %>%
html_table(fill= T) %>%
as.data.frame() %>%
select(Name,  iso3c = ISO.3166.1.alpha.3 ) %>%
slice(-28)
df <- download_merged_data(cached = TRUE, silent = TRUE)
sifranik <- tidycovid19_variable_definitions %>%
select(var_name, var_def)
#kable(df) %>% kableExtra::kable_styling()
euCovid <- df %>%
inner_join(., euCountries, by = "iso3c") %>%
group_by(date) %>%
summarise(confirmed = sum(confirmed, na.rm = T)) %>%
#  filter(country == "Croatia") %>%
mutate(
new_cases = confirmed - lag(confirmed),
ave_new_cases = rollmean(new_cases, 7, na.pad=TRUE, align="right")
) %>%
filter(!is.na(new_cases), !is.na(ave_new_cases)) %>%
select(date, EUcase = new_cases)
euCovidXTS <- xts::xts(euCovid[,-1],
order.by = as.Date(euCovid$date),
unique=TRUE)
CROCovid <- df %>%
filter(country == "Croatia") %>%
mutate(
new_cases = confirmed - lag(confirmed),
ave_new_cases = rollmean(new_cases, 7, na.pad=TRUE, align="right")
) %>%
filter(!is.na(new_cases), !is.na(ave_new_cases)) %>%
select(date, CROcase = new_cases)
CROCovidXTS <- xts::xts(CROCovid[,-1],
order.by = as.Date(CROCovid$date),
unique=TRUE)
# UREDI ----
COVIDtur <- merge(VIX$VIX.Close,
GSPC$GSPC.Close,
GDAXI$GDAXI.Close,
FTSE$FTSE.Close,
oil,
gold$`EURO (AM`,
CROCovidXTS,
euCovidXTS)
COVIDtur <- merge(CrobexTur,COVIDtur, join = "left")
COVIDtur <- merge(Crobex, COVIDtur, join = "left")
COVIDtur <- COVIDtur[index(COVIDtur) > "2019-01-01"]
colnames(COVIDtur)[1] <- "crobex"
colnames(COVIDtur)[2] <- "crobexTur"
colnames(COVIDtur)[3] <- "vix"
colnames(COVIDtur)[4] <- "sp500"
colnames(COVIDtur)[5] <- "dax"
colnames(COVIDtur)[6] <- "ftse"
colnames(COVIDtur)[7] <- "oil"
colnames(COVIDtur)[8] <- "gold"
colnames(COVIDtur)[9] <- "caseCRO"
colnames(COVIDtur)[10] <- "caseEU"
COVIDtur %>%
as.data.frame() %>%
mutate_at(c("caseCRO","caseEU"),~replace(.,is.na(.),0)) %>%
drop_na() %>%
as.xts() -> COVIDtur
COVIDtur$lockdwn <- 0
COVIDtur$lockdwn[index(COVIDtur) >= "2020-01-23"] <- 1
COVIDturDF <- fortify(COVIDtur)
dfMelted <- melt(COVIDturDF, id.vars="Index")
COVIDturDF %>%
# select(Index:gold) %>%
melt(., id.vars = "Index") %>%
group_by(variable) %>%
mutate(log = log(value),
diff = c(0,diff(value))) -> CDFld
raw <- CDFld %>% select(Index, variable, value) %>% spread(variable,value)
diff <- CDFld %>% select(Index, variable,diff) %>% spread(variable,diff)
log <- CDFld %>% select(Index, variable,log) %>% spread(variable,log)
all <- left_join(raw, diff, by="Index") %>% left_join(.,log, by = "Index")
diff <- diff %>% select(-lockdwn) %>% mutate(., lockdown = raw$lockdwn)
# DESKRIPTIVA----
ggplot(dfMelted, aes(Index, value)) +
geom_line() +
facet_wrap( ~ variable, scales = "free")
ggplot(CDFld,aes(Index,log)) +
geom_line() +
facet_wrap(~variable, scales = "free")
ggplot(CDFld,aes(Index,diff)) +
geom_line() +
facet_wrap(~variable, scales = "free")
dfMelted %>%
group_by(variable) %>%
summarise(Prosjek = mean(value, na.rm = T),
StDev = sd(value, na.rm = T),
Min = min(value, na.rm = T),
Max = max(value, na.rm = T),
Skew = moments::kurtosis(value, na.rm = T),
Kurt = moments::skewness(value, na.rm = T))
CDFld %>%
group_by(variable) %>%
summarise(Prosjek = mean(log, na.rm = T),
StDev = sd(log, na.rm = T),
Min = min(log, na.rm = T),
Max = max(log, na.rm = T),
Skew = moments::kurtosis(log, na.rm = T),
Kurt = moments::skewness(log, na.rm = T))
CDFld %>%
group_by(variable) %>%
summarise(Prosjek = mean(diff, na.rm = T),
StDev = sd(diff, na.rm = T),
Min = min(diff, na.rm = T),
Max = max(diff, na.rm = T),
Skew = moments::kurtosis(diff, na.rm = T),
Kurt = moments::skewness(diff, na.rm = T))
#raw
dfMelted %>%
group_by(variable) %>%
summarise(
berra.pvalue =  jarque.bera.test(value)$p.value,
berra =  jarque.bera.test(value)$p.value<0.05,
box.pvalue = Box.test(value, lag=20, type="Ljung-Box")$p.value,
box = Box.test(value, lag=20, type="Ljung-Box")$p.value<0.05,
adf.pvalue = adf.test(value, alternative = "stationary")$p.value,
adf = adf.test(value, alternative = "stationary")$p.value<0.05,
kpss.pvalue=kpss.test(value)$p.value,
kpss=kpss.test(value)$p.value>0.05
)
#log
CDFld  %>%
group_by(variable) %>%
summarise(
berra.pvalue =  jarque.bera.test(log)$p.value,
berra =  jarque.bera.test(log)$p.value<0.05,
box.pvalue = Box.test(log, lag=20, type="Ljung-Box")$p.value,
box = Box.test(log, lag=20, type="Ljung-Box")$p.value<0.05,
adf.pvalue = adf.test(log, alternative = "stationary")$p.value,
adf = adf.test(log, alternative = "stationary")$p.value<0.05,
kpss.pvalue=kpss.test(log)$p.value,
kpss=kpss.test(log)$p.value>0.05
)
#diff
CDFld  %>%
group_by(variable) %>%
summarise(
berra.pvalue =  jarque.bera.test(diff)$p.value,
berra =  jarque.bera.test(diff)$p.value<0.05,
box.pvalue = Box.test(diff, lag=20, type="Ljung-Box")$p.value,
box = Box.test(diff, lag=20, type="Ljung-Box")$p.value<0.05,
adf.pvalue = adf.test(diff, alternative = "stationary")$p.value,
adf = adf.test(diff, alternative = "stationary")$p.value<0.05,
kpss.pvalue=kpss.test(diff)$p.value,
kpss=kpss.test(diff)$p.value>0.05
)
# PROCJENA----
df2<-COVIDtuDFf[complete.cases(COVIDtuDFf),]
sum(is.na(df2))
reg <- lm(crobexTur ~ lockdown + caseEU + caseCRO + sp500 + crobex + dax + oil + gold, data = diff)
options(scipen=999)
summary(reg)
plot(reg, which = 1)
plot(reg, which = 2)
plot(reg, which = 3)
plot(reg, which = 4)
options(htmltools.dir.version = FALSE)
library(knitr)
opts_chunk$set(
fig.align="center", #fig.width=6, fig.height=4.5,
# out.width="748px", #out.length="520.75px",
dpi=300, #fig.path='Figs/',
cache=F#, echo=F, warning=F, message=F
)
ISIN <- readxl::read_xlsx("./Data/ISIN_list.xlsx") %>% select(ISIN)
ISIN <- readxl::read_xlsx("./Data/ISIN_list.xlsx") %>% select(ISIN)
ISIN <- readxl::read_xlsx("../Data/ISIN_list.xlsx") %>% select(ISIN)
knitr::opts_chunk$set(echo = TRUE, cache = TRUE)
market %>%
mutate(dr = cut(Date, breaks = c(range(Date),
as.Date(c("2020-02-12", "2020-04-08","2021-04-15"))), include.lowest=TRUE)) %>% #View()
mutate(Pandemic =  case_when(
.$dr == "2019-01-03" ~ "Pre",
.$dr == "2020-02-12" ~ "Ongoing",
.$dr == "2020-04-08" ~ "Post")) %>%  #
filter(Date < "2021-04-15") %>%
select(-dr) %>% arrange (Date) %>%  #
group_by(Pandemic, Index) %>%
summarise(Total = sum(Return),
Average = mean(Return),
Stdev = sd(Return),
Min = min(Return),
Max = max(Return)) %>%
mutate_if(is.numeric, round, 3) %>% kable(caption = "Table 1: Overview of the market returns over the analysed period")
```{r importData, echo=FALSE,  message = FALSE, warning = FALSE}
ISIN <- readxl::read_xlsx("./Data/ISIN_list.xlsx") %>% select(ISIN)
links <- c()
rawDta <- c()
for( i in ISIN){
links <- paste0('https://zse.hr/json/securityHistory/', i,
'/2019-01-01/2021-04-13/hr?trading_model_id=ALL')
}
for (i in links){
rawDta[[i]] <- fromJSON(content(GET(i), as = "text", encoding = "UTF-8"))
}
stockDF <- lapply(rawDta, '[[', "rows") %>% bind_rows()
source("./Secret/Passkey.R")
Crobex <- Quandl("ZAGREBSE/CROBEX", type = "zoo",collapse = "daily",start_date = "2019-01-02", end_date = Sys.Date())
gold <- Quandl("LBMA/GOLD", type = "zoo", collapse = "daily", start_date = "2019-01-01",end_date = Sys.Date())
gold <- gold[,5]
options(scipen = 999,pillar.sigfigs=3)
CrobexKonstr <- Quandl("ZAGREBSE/CROBEXKONSTRUKT", type = "raw",collapse = "daily",start_date = "2019-01-02", end_date = Sys.Date()) %>%
arrange(Date) %>%
mutate(CrobexKonstr = ((Value - lag(Value))/Value)*100) %>%
drop_na() %>%
select(-Value)
CrobexInd <- Quandl("ZAGREBSE/CROBEXINDUSTRIJA", type = "raw",collapse = "daily",start_date = "2019-01-02", end_date = Sys.Date()) %>%
arrange(Date) %>%
mutate(CrobexInd = ((Value - lag(Value))/Value)*100) %>%
drop_na() %>%
select(-Value)
CrobexNutr <- Quandl("ZAGREBSE/CROBEXNUTRIS", type = "raw",collapse = "daily",start_date = "2019-01-02", end_date = Sys.Date()) %>%
arrange(Date) %>%
mutate(CrobexNutr = ((Value - lag(Value))/Value)*100) %>%
drop_na() %>%
select(-Value)
CrobexTur <- Quandl("ZAGREBSE/CROBEXTURIST", type = "raw",collapse = "daily",start_date = "2019-01-02", end_date = Sys.Date()) %>%
arrange(Date) %>%
mutate(CrobexTur = ((Value - lag(Value))/Value)*100) %>%
drop_na() %>%
select(-Value)
CrobexTr <- Quandl("ZAGREBSE/CROBEXTR", type = "raw",collapse = "daily",start_date = "2019-01-02", end_date = Sys.Date()) %>%
arrange(Date) %>%
mutate(CrobexTr = ((Value - lag(Value))/Value)*100) %>%
drop_na() %>%
select(-Value)
market <- CrobexKonstr %>%
left_join(.,CrobexInd, by = "Date") %>%
left_join(.,CrobexNutr, by = "Date") %>%
left_join(.,CrobexTur, by = "Date") %>%
left_join(.,CrobexTr, by = "Date") %>%
gather( Index,Return, -Date)
#range(market$Date)
```
```{r cleanData, echo=FALSE,  message = FALSE, warning = FALSE}
TOURISMdta <- stockDF %>% select(Date = date, Close = last_price, url) %>%
mutate(Date = gsub("[.]$","", Date)) %>%
mutate(Ticker = str_sub(.$url,-37,-34)) %>%
mutate(Close = as.numeric(gsub("(.*),.*", "\\1", Close))) %>%
select(-url) %>%
group_by(Ticker) %>%
dplyr::mutate(n = n()) %>%
ungroup() %>%
dplyr::filter(n > 100) %>%
dplyr::select(-n) %>%
group_by(Ticker) %>%
distinct(Date, .keep_all=TRUE) %>%
ungroup() %>%
tidyr::spread(Ticker, Close, fill=0) %>%
mutate( Date = as.Date(Date,"%d.%m.%Y")) %>%
arrange(desc(Date))
TOURISMdta <- zoo(TOURISMdta[,-1], order.by = TOURISMdta$Date)
```
```{r stockReturns, echo=FALSE, message=FALSE, warning=FALSE}
rates <- get_rates_from_prices(TOURISMdta,
quote = "Close",
multi_day = TRUE,
compounding = "continuous")
ratesDF <- data.frame(rates)
ratesDF <- data.frame(Date = rownames(ratesDF), rates) %>% mutate(Date = as.Date(Date,"%Y-%m-%d"))
rownames(ratesDF) <- NULL
ratesDF[sapply(ratesDF, is.infinite)] <- NA
ratesDF[sapply(ratesDF, is.nan)] <- NA
ratesDF[sapply(ratesDF, is.na)] <- 0
rates <-  zoo(ratesDF[,-1], order.by = ratesDF$Date)
```
```{r crobexReturn, echo=FALSE, message=FALSE, warning=FALSE}
rates_indx <- get_rates_from_prices(Crobex,
quote = "Close",
multi_day = TRUE,
compounding = "continuous")
colnames(rates_indx) <- "Crobex"
```
```{r goldReturn, echo=FALSE, message=FALSE, warning=FALSE}
add_indx <- get_rates_from_prices(gold,
quote = "Close",
multi_day = TRUE,
compounding = "continuous")
colnames(add_indx) <- "gold"
```
```{r, echo=FALSE, message=FALSE, warning=FALSE}
market %>%
mutate(dr = cut(Date, breaks = c(range(Date),
as.Date(c("2020-02-12", "2020-04-08","2021-04-15"))), include.lowest=TRUE)) %>% #View()
mutate(Pandemic =  case_when(
.$dr == "2019-01-03" ~ "Pre",
.$dr == "2020-02-12" ~ "Ongoing",
.$dr == "2020-04-08" ~ "Post")) %>%  #
filter(Date < "2021-04-15") %>%
select(-dr) %>% arrange (Date) %>%  #
group_by(Pandemic, Index) %>%
summarise(Total = sum(Return),
Average = mean(Return),
Stdev = sd(Return),
Min = min(Return),
Max = max(Return)) %>%
mutate_if(is.numeric, round, 3) %>% kable(caption = "Table 1: Overview of the market returns over the analysed period")
```
```{r, echo=FALSE, message=FALSE, warning=FALSE}
securities_returns <- apply_market_model(
rates = rates,
regressor = rates_indx,
same_regressor_for_all = TRUE,
market_model = "sim",
estimation_method = "ols",
estimation_start = as.Date("2019-01-01"),
estimation_end = as.Date("2020-02-15")
)
pt <- parametric_tests(list_of_returns = securities_returns,
event_start = as.Date("2020-02-16"),
event_end = as.Date("2020-03-23"))
options(digits = 3)
pt <- pt[,c(-2,-3,-4)]
colnames(pt) <- c("Date", "BW80","sig","BW85","sig","t-stat","sig","pt","sig","BH","sig","LMB","sig")
kable(pt,caption = "Table 2: The event study reuslts for the parametric tests")
```
