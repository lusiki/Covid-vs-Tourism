mutate( Date = gsub("[.]$","", Date)) %>%
mutate( Date = as.Date(Date,"%d.%m.%Y"),
MAIS = as.numeric(gsub("(.*),.*", "\\1", MAIS)))
r <- GET("https://zse.hr/json/securityHistory/HRRIVPRA0000/2019-01-01/2021-04-13/hr?trading_model_id=ALL")
response <- content(r, as = "text", encoding = "UTF-8")
VALAMAR <- fromJSON(response, flatten = TRUE) %>%
data.frame() %>%
select(Date = rows.date, RIVP = rows.last_price ) %>%
mutate( Date = gsub("[.]$","", Date)) %>%
mutate( Date = as.Date(Date,"%d.%m.%Y"),
RIVP = as.numeric(gsub("(.*),.*", "\\1", RIVP)))
TOURISMdta <- left_join(ARENA, MAISTRA,VALAMAR, by=c("Date")) %>%
inner_join(.,VALAMAR, by=c("Date")) %>%
distinct(Date, .keep_all=TRUE)
TOURISMdta <- zoo(TOURISMdta[,-1], order.by = TOURISMdta$Date)
rates <- get_rates_from_prices(TOURISMdta,
quote = "Close",
multi_day = TRUE,
compounding = "continuous")
rates
Returns <- returns %>% drop_na()
Returns <- rates %>% drop_na()
Returns <- na.omit(rates)
Returns
View(Returns)
es <- eventstudy(firm.returns = Returns,
event.list = SplitD,
event.window = 10,
type = "None",
to.remap = TRUE,
remap = "cumsum",
inference = TRUE,
inference.strategy = "bootstrap")
SplitD <- data.frame(Name=c("ARNT","MAIS","RIVP"),
Date = rep(as.Date("2020-02-24"),3))
str(SplitD)
SplitD <- data.frame(Name=c("ARNT","MAIS","RIVP"),
Date = rep(as.Date("2020-02-24"),3))
es <- eventstudy(firm.returns = Returns,
event.list = SplitD,
event.window = 10,
type = "None",
to.remap = TRUE,
remap = "cumsum",
inference = TRUE,
inference.strategy = "bootstrap")
str(Returns)
str(SplitD)
SplitD <- zoo(SplitD[,-1], order.by = SplitD$Date)
str(SplitDates)
str(StockPriceReturns)
SplitD <- data.frame(Name=c("ARNT","MAIS","RIVP"),
Date = rep(as.Date("2020-02-24"),3))
es <- eventstudy(firm.returns = Returns,
event.list = SplitD,
event.window = 10,
type = "None",
to.remap = TRUE,
remap = "cumsum",
inference = TRUE,
inference.strategy = "bootstrap")
str(SplitDates)
SplitD <- data.frame(name=c("ARNT","MAIS","RIVP"),
when = rep(as.Date("2020-02-24"),3))
es <- eventstudy(firm.returns = Returns,
event.list = SplitD,
event.window = 10,
type = "None",
to.remap = TRUE,
remap = "cumsum",
inference = TRUE,
inference.strategy = "bootstrap")
plot(es)
es <- eventstudy(firm.returns = Returns,
event.list = SplitD,
event.window = 5,
type = "None",
to.remap = TRUE,
remap = "cumsum",
inference = TRUE,
inference.strategy = "bootstrap")
plot(es)
es <- eventstudy(firm.returns = Returns,
event.list = SplitD,
event.window = 20,
type = "None",
to.remap = TRUE,
remap = "cumsum",
inference = TRUE,
inference.strategy = "bootstrap")
plot(es)
es <- eventstudy(firm.returns = Returns,
event.list = SplitD,
event.window = 40,
type = "None",
to.remap = TRUE,
remap = "cumsum",
inference = TRUE,
inference.strategy = "bootstrap")
plot(es)
es <- eventstudy(firm.returns = Returns,
event.list = SplitD,
event.window = 40,
type = "marketModel",
to.remap = TRUE,
remap = "cumsum",
inference = TRUE,
inference.strategy = "bootstrap")
rates_indx <- get_rates_from_prices(Crobex,
quote = "Close",
multi_day = TRUE,
compounding = "continuous")
Quandl.api_key("jvwknzKzNdiuqGPCyXcT")
Crobex <- Quandl("ZAGREBSE/CROBEX", type = "zoo",collapse = "daily",start_date = "2019-01-02", end_date = Sys.Date())
rates <- get_rates_from_prices(TOURISMdta,
quote = "Close",
multi_day = TRUE,
compounding = "continuous")
rates_indx <- get_rates_from_prices(Crobex,
quote = "Close",
multi_day = TRUE,
compounding = "continuous")
OtherReturns
data(OtherReturns)
str(OtherReturns)
View(OtherReturns)
View(rates_indx)
model.args = list(market.returns=rates_indx$V1)
names(rates_indx)
names(OtherReturns)
colnames(rates_indx) <- "Crobex"
names(rates_indx)
model.args = list(market.returns=rates_indx$Crobex)
es <- eventstudy(firm.returns = Returns,
event.list = SplitD,
event.window = 40,
type = "marketModel",
to.remap = TRUE,
remap = "cumsum",
inference = TRUE,
inference.strategy = "bootstrap",
model.args = list(market.returns=rates_indx$Crobex))
plot(es)
gold <- Quandl("LBMA/GOLD", type = "zoo", collapse = "daily", start_date = "2019-01-01",end_date = Sys.Date())
add_indx <- get_rates_from_prices(gold,
quote = "Close",
multi_day = TRUE,
compounding = "continuous")
colnames(add_indx) <- "gold"
add_indx
gold <- gold[,gold$`EURO (AM`]
gold <- gold[,gold$`EURO (AM)`]
View(gold)
names(gold)
gold <- gold[,gold$"EURO (AM)"]
gold <- gold[,5]
add_indx <- get_rates_from_prices(gold,
quote = "Close",
multi_day = TRUE,
compounding = "continuous")
colnames(add_indx) <- "gold"
names(gold)
colnames(add_indx) <- "gold"
names(add_indx)
es2 <- eventstudy(firm.returns = Returns,
event.list = SplitD,
event.window = 40,
type = "marketModel",
to.remap = TRUE,
remap = "cumsum",
inference = TRUE,
inference.strategy = "bootstrap",
model.args = list(market.returns=rates_indx$Crobex),
others=add_indx$gold,
market.returns.purge=TRUE)
es2 <- eventstudy(firm.returns = Returns,
event.list = SplitD,
event.window = 40,
type = "marketModel",
to.remap = TRUE,
remap = "cumsum",
inference = TRUE,
inference.strategy = "bootstrap",
model.args = list(market.returns=rates_indx$Crobex,
others=add_indx$gold,
market.returns.purge=TRUE))
plot(es2)
es3 <- eventstudy(firm.returns = Returns,
event.list = SplitD,
event.window = 40,
type = "marketModel",
to.remap = TRUE,
remap = "cumsum",
inference = TRUE,
inference.strategy = "bootstrap",
model.args = list(market.returns=rates_indx$Crobex,
others=add_indx$gold,
market.returns.purge=TRUE))
plot(es3)
es2 <- eventstudy(firm.returns = Returns,
event.list = SplitD,
event.window = 40,
type = "marketModel",
to.remap = TRUE,
remap = "cumsum",
inference = TRUE,
inference.strategy = "bootstrap",
model.args = list(market.returns=rates_indx$Crobex))
plot(es2)
es <- eventstudy(firm.returns = Returns,
event.list = SplitD,
event.window = 40,
type = "None",
to.remap = TRUE,
remap = "cumsum",
inference = TRUE,
inference.strategy = "bootstrap")
plot(es)
library(estudy2)
library(plotly)
library(TSstudio)
library(jsonlite)
library(plyr)
library(zoo)
library(httr)
library(plotly)
library(TSstudio)
library(jsonlite)
library(dplyr)
library(tidyr)
library(Quandl)
r <- GET("https://zse.hr/json/securityHistory/HRARNTRA0004/2019-01-01/2021-04-13/hr?trading_model_id=ALL")
response <- content(r, as = "text", encoding = "UTF-8")
ARENA <- fromJSON(response, flatten = TRUE) %>%
data.frame() %>%
select(Date = rows.date, ARNT = rows.last_price ) %>%
mutate( Date = gsub("[.]$","", Date)) %>%
mutate( Date = as.Date(Date,"%d.%m.%Y"),
ARNT = as.numeric(gsub("(.*),.*", "\\1", ARNT)))
r <- GET("https://zse.hr/json/securityHistory/HRMAISRA0007/2019-01-01/2021-04-13/hr?trading_model_id=ALL")
response <- content(r, as = "text", encoding = "UTF-8")
MAISTRA <- fromJSON(response, flatten = TRUE) %>%
data.frame() %>%
select(Date = rows.date, MAIS = rows.last_price ) %>%
mutate( Date = gsub("[.]$","", Date)) %>%
mutate( Date = as.Date(Date,"%d.%m.%Y"),
MAIS = as.numeric(gsub("(.*),.*", "\\1", MAIS)))
r <- GET("https://zse.hr/json/securityHistory/HRRIVPRA0000/2019-01-01/2021-04-13/hr?trading_model_id=ALL")
response <- content(r, as = "text", encoding = "UTF-8")
VALAMAR <- fromJSON(response, flatten = TRUE) %>%
data.frame() %>%
select(Date = rows.date, RIVP = rows.last_price ) %>%
mutate( Date = gsub("[.]$","", Date)) %>%
mutate( Date = as.Date(Date,"%d.%m.%Y"),
RIVP = as.numeric(gsub("(.*),.*", "\\1", RIVP)))
View(ARENA)
TOURISMdta <- left_join(ARENA, MAISTRA,VALAMAR, by=c("Date")) %>%
inner_join(.,VALAMAR, by=c("Date")) %>%
distinct(Date, .keep_all=TRUE)
View(TOURISMdta)
TOURISMdta <- left_join(ARENA, MAISTRA,VALAMAR, by=c("Date")) %>%
inner_join(.,VALAMAR, by=c("Date")) %>%
distinct(Date, .keep_all=TRUE) %>%
omit_na()
View(TOURISMdta)
TOURISMdta <- left_join(ARENA, MAISTRA,VALAMAR, by=c("Date")) %>%
inner_join(.,VALAMAR, by=c("Date")) %>%
distinct(Date, .keep_all=TRUE) %>%
filter(!is.na(.))
View(TOURISMdta)
TOURISMdta <- left_join(ARENA, MAISTRA,VALAMAR, by=c("Date")) %>%
inner_join(.,VALAMAR, by=c("Date")) %>%
distinct(Date, .keep_all=TRUE) %>%
drop_na()
View(TOURISMdta)
TOURISMdta <- zoo(TOURISMdta[,-1], order.by = TOURISMdta$Date)
Quandl.api_key("jvwknzKzNdiuqGPCyXcT")
Crobex <- Quandl("ZAGREBSE/CROBEX", type = "zoo",collapse = "daily",start_date = "2019-01-02", end_date = Sys.Date())
rates <- get_rates_from_prices(TOURISMdta,
quote = "Close",
multi_day = TRUE,
compounding = "continuous")
rates_indx <- get_rates_from_prices(Crobex,
quote = "Close",
multi_day = TRUE,
compounding = "continuous")
colnames(rates_indx) <- "Crobex"
securities_returns <- apply_market_model(
rates = rates,
regressor = rates_indx,
same_regressor_for_all = TRUE,
market_model = "sim",
estimation_method = "ols",
estimation_start = as.Date("2019-01-01"),
estimation_end = as.Date("2020-01-23")
)
parametric_tests(list_of_returns = securities_returns,
event_start = as.Date("2020-02-24"),
event_end = as.Date("2020-04-14"))
parametric_tests(list_of_returns = securities_returns,
event_start = as.Date("2020-02-24"),
event_end = as.Date("2020-04-14"))
nonparametric_tests(list_of_returns = securities_returns,
event_start = as.Date("2020-02-24"),
event_end = as.Date("2020-04-14"))
library(eventstudies)
SplitD <- data.frame(Name=c(rep("ARNT", 40),
rep("MAIS", 40),
rep("RIVP", 40)),
Date = rep(seq(as.Date("2020-02-24"),
by = "day",
length.out = 40),3))
SplitD <- data.frame(name=c("ARNT","MAIS","RIVP"),
when = rep(as.Date("2020-02-24"),3))
Returns <- na.omit(rates)
es <- eventstudy(firm.returns = Returns,
event.list = SplitD,
event.window = 40,
type = "None",
to.remap = TRUE,
remap = "cumsum",
inference = TRUE,
inference.strategy = "bootstrap")
plot(es)
rates_indx <- get_rates_from_prices(Crobex,
quote = "Close",
multi_day = TRUE,
compounding = "continuous")
colnames(rates_indx) <- "Crobex"
es2 <- eventstudy(firm.returns = Returns,
event.list = SplitD,
event.window = 40,
type = "marketModel",
to.remap = TRUE,
remap = "cumsum",
inference = TRUE,
inference.strategy = "bootstrap",
model.args = list(market.returns=rates_indx$Crobex))
plot(es2)
gold <- Quandl("LBMA/GOLD", type = "zoo", collapse = "daily", start_date = "2019-01-01",end_date = Sys.Date())
gold <- gold[,5]
add_indx <- get_rates_from_prices(gold,
quote = "Close",
multi_day = TRUE,
compounding = "continuous")
colnames(add_indx) <- "gold"
es3 <- eventstudy(firm.returns = Returns,
event.list = SplitD,
event.window = 40,
type = "marketModel",
to.remap = TRUE,
remap = "cumsum",
inference = TRUE,
inference.strategy = "bootstrap",
model.args = list(market.returns=rates_indx$Crobex,
others=add_indx$gold,
market.returns.purge=TRUE))
plot(es3)
r <- GET("https://zse.hr/json/securityHistory/HRARNTRA0004/2019-01-01/2021-04-13/hr?trading_model_id=ALL")
response <- content(r, as = "text", encoding = "UTF-8")
ARENA <- fromJSON(response, flatten = TRUE)
View(ARENA)
ARENA <- fromJSON(response, flatten = TRUE) %>%
data.frame()
View(ARENA)
r <- GET("https://zse.hr/json/securityHistory/HRMAISRA0007/2019-01-01/2021-04-13/hr?trading_model_id=ALL")
response <- content(r, as = "text", encoding = "UTF-8")
MAISTRA <- fromJSON(response, flatten = TRUE) %>%
data.frame()
View(MAISTRA)
ISIN <- readxl::read_xlsx("../Data/ISIN_list.xlsx")
ISIN <- readxl::read_xlsx("./Data/ISIN_list.xlsx")
View(ISIN)
str(ISIN)
ISIN <- readxl::read_xlsx("./Data/ISIN_list.xlsx") %>% select(ISIN)
site <- paste("https://zse.hr/json/securityHistory/",
ISIN,
"/2019-01-01/2021-04-13/hr?trading_model_id=ALL"
, sep="")
site
ISIN <- readxl::read_xlsx("./Data/ISIN_list.xlsx") %>% select(ISIN) %>% as.vector()
site <- paste("https://zse.hr/json/securityHistory/",
ISIN,
"/2019-01-01/2021-04-13/hr?trading_model_id=ALL"
, sep="")
site
site
ISIN
CODES <- list(length=length(ISIN))
CODES
ISIN <- readxl::read_xlsx("./Data/ISIN_list.xlsx") %>% select(ISIN) %>% as.vector()
CODES <- list(length=length(ISIN))
CODES <- vector("list",length=length(ISIN))
View(CODES)
for (i in 1:length(ISIN)){
CODES[[i]] <- paste0('https://zse.hr/json/securityHistory/',i,'/2019-01-01/2021-04-13/hr?trading_model_id=ALL')
}
View(CODES)
CODES
ISIN <- readxl::read_xlsx("./Data/ISIN_list.xlsx") %>% select(ISIN) %>% as.vector()
length(ISIN)
ISIN
ISIN <- readxl::read_xlsx("./Data/ISIN_list.xlsx") %>% select(ISIN)
ISIN
CODES <- vector("list",length=length(ISIN))
library(glue)
X_l <- lapply(1:length(ISIN), function(i)glue('https://zse.hr/json/securityHistory/',i,'/2019-01-01/2021-04-13/hr?trading_model_id=ALL'))
View(X_l)
length(ISIN)
str(ISIN)
X_l <- lapply(ISIN, function(i)glue('https://zse.hr/json/securityHistory/',i,'/2019-01-01/2021-04-13/hr?trading_model_id=ALL'))
X_l <- lapply(ISIN,1, function(i)glue('https://zse.hr/json/securityHistory/',i,'/2019-01-01/2021-04-13/hr?trading_model_id=ALL'))
ISIN <- readxl::read_xlsx("./Data/ISIN_list.xlsx")
View(ISIN)
for( i in ISIN){
result <- paste0('https://zse.hr/json/securityHistory/',i,'/2019-01-01/2021-04-13/hr?trading_model_id=ALL')
print(result)}
ISIN <- readxl::read_xlsx("./Data/ISIN_list.xlsx") %>% select(ISIN)
for( i in ISIN){
result <- paste0('https://zse.hr/json/securityHistory/',i,'/2019-01-01/2021-04-13/hr?trading_model_id=ALL')
print(result)}
links <- for( i in ISIN){
result <- paste0('https://zse.hr/json/securityHistory/',i,'/2019-01-01/2021-04-13/hr?trading_model_id=ALL')
print(result)}
links <- for( i in ISIN){
result <- paste0('https://zse.hr/json/securityHistory/',i,'/2019-01-01/2021-04-13/hr?trading_model_id=ALL')
}
links
links <- c()
for( i in ISIN){
links <- paste0('https://zse.hr/json/securityHistory/',i,'/2019-01-01/2021-04-13/hr?trading_model_id=ALL')
}
links
ARENA <- fromJSON(content(GET("https://zse.hr/json/securityHistory/HRARNTRA0004/2019-01-01/2021-04-13/hr?trading_model_id=ALL"), as = "text", encoding = "UTF-8"))
View(ARENA)
rawDta <- c()
for (i in links){
rawDta <- fromJSON(content(GET(i), as = "text", encoding = "UTF-8"))
}
View(rawDta)
df <- rawDta %>% data.frame()
View(df)
JLSA <- fromJSON(content(GET("https://zse.hr/json/securityHistory/HRJLSARA0007/2019-01-01/2021-04-13/hr?trading_model_id=ALL"), as = "text", encoding = "UTF-8"))
View(JLSA)
JLSA %>% data.frame() %>%
select(Date = rows.date, ARNT = rows.last_price ) %>%
mutate( Date = gsub("[.]$","", Date)) %>%
mutate( Date = as.Date(Date,"%d.%m.%Y"),
ARNT = as.numeric(gsub("(.*),.*", "\\1", ARNT)))
JLSA <- fromJSON(content(GET("https://zse.hr/json/securityHistory/HRJLSARA0007/2019-01-01/2021-04-13/hr?trading_model_id=ALL"), as = "text", encoding = "UTF-8"))
JLSA %>% data.frame()
JLSA <- fromJSON(content(GET("https://zse.hr/json/securityHistory/HRTUHORA0001/2019-01-01/2021-04-13/hr?trading_model_id=ALL"), as = "text", encoding = "UTF-8"))
JLSA %>% data.frame()
view(JLSA)
View(JLSA)
links
rawDta <- c()
for (i in links){
rawDta <- fromJSON(content(GET(i), as = "text", encoding = "UTF-8"))
}
View(rawDta)
for (i in links){
rawDta[i] <- fromJSON(content(GET(i), as = "text", encoding = "UTF-8"))
}
View(rawDta)
for (i in links){
rawDta[[i]] <- fromJSON(content(GET(i), as = "text", encoding = "UTF-8"))
}
df <- rawDta %>% data.frame()
View(rawDta)
ISIN <- readxl::read_xlsx("./Data/ISIN_list.xlsx") %>% select(ISIN)
links <- c()
for( i in ISIN){
links <- paste0('https://zse.hr/json/securityHistory/', i,
'/2019-01-01/2021-04-13/hr?trading_model_id=ALL')
}
rawDta <- c()
for (i in links){
rawDta[[i]] <- fromJSON(content(GET(i), as = "text", encoding = "UTF-8"))
}
ISIN <- readxl::read_xlsx("./Data/ISIN_list.xlsx") %>% select(ISIN)
library(estudy2)
library(plotly)
library(TSstudio)
library(jsonlite)
library(plyr)
library(zoo)
library(httr)
library(plotly)
library(jsonlite)
library(dplyr)
library(tidyr)
library(Quandl)
ISIN <- readxl::read_xlsx("./Data/ISIN_list.xlsx") %>% select(ISIN)
links <- c()
for( i in ISIN){
links <- paste0('https://zse.hr/json/securityHistory/', i,
'/2019-01-01/2021-04-13/hr?trading_model_id=ALL')
}
rawDta <- c()
for (i in links){
rawDta[[i]] <- fromJSON(content(GET(i), as = "text", encoding = "UTF-8"))
}
View(rawDta)
df <- rawDta[[1]] %>% data.frame()
View(df)
str(rawDta)
dfs <- lapply(rawDta, `[`, c('raw'))
View(df)
dfs <- lapply(rawDta, `[`, c('rows'))
data <- do.call("rbind", lapply(rawDta, '[[', 7))
lapply(rawDta, '[[', 2)
